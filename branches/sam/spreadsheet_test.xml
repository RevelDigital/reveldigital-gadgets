<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="RevelDigital Google Spreadsheet Gadget" description="Basic tabular display of Google spreadsheet data" author="RevelDigital" background="transparent">
  <UserPref name="spreadsheetUrl" display_name="Published spreadsheet URL" datatype="string" />
  <UserPref name="hasTitle" display_name="Use first row as header"  datatype="bool" default_value="true" />
  <UserPref name="hasFormat" display_name="Use second row for formatting"  datatype="bool" default_value="false" />
  <UserPref name="header-style" display_name="Header Style" datatype="style" default_value="font-family:Verdana;color:rgb(255, 255, 255);font-size:18px;" required="true" />
  
  <UserPref name="ForeColor" datatype="hidden" />
  <UserPref name="BackColor" datatype="hidden" />
</ModulePrefs>
<Content type="html">
<![CDATA[





<style type="text/css">

body
{
  background: transparent;
}

table
{
  width: 100%;
}

th
{
  font-size: 140% !important;
  padding: 8px;
}

th
{
  font-weight: bold;
  font-color: #888;
  font-size: 140%;
  text-align: left;
  text-shadow: 2px 2px 2px #888;
}
</style>



<div id="data">
  <table id="output">
  </table>
</div>


<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script type="text/javascript">

 var prefs = new gadgets.Prefs();

  function load() {
  
    $("#data").height($(window).height()).width($(window).width());
    
    update();
    
    setInterval(update, 120000);
  }

  gadgets.util.registerOnLoadHandler(load);



</script>

<script type="text/javascript">

  var max_id = 0;
  
  var update = function () {

    var url = googleUrl(prefs.getString("spreadsheetUrl"));
    
    $.getJSON(url, function(json){
      if(json) {
        cellEntries(json);
      }
    });
  }

  function cellEntries(json) {

    var header = true;
    var format = true;
    
    $("#data table").empty();
    
    var tbody = $("<tbody></tbody>");
    var thead = $("<thead></thead>");
    
    var tr;
    for (var i=0; i<json.feed.entry.length; i++) {
  
      var entry = json.feed.entry[i];

      if (format && entry.gs$cell.row == '2') {
        addColumnStyleClass(entry.content.$t, '.column_' + entry.gs$cell.col);
      }

      else {
        if (header && entry.gs$cell.col == '1' && entry.gs$cell.row == '1') {
          if (tr != null) {
            $(thead).append(tr);
          }
          tr = $("<tr/>");
        } else if (entry.gs$cell.col == '1') {
          if (tr != null) {
            $(tbody).append(tr);
          }
          tr = $('<tr/>');
        }
        
        var td;
        if (header && entry.gs$cell.row == '1') {
          td = $("<th/>");
        } 
        else {
          td = $("<td class=column_" + entry.gs$cell.col + "/>");
        }
        $(td).text(entry.content.$t);

        $(tr).append(td);
        $(tbody).append(tr);
      }
      
     
    }

    $(thead).hide().appendTo("#data > table").fadeIn();
    $(tbody).hide().appendTo("#data > table").fadeIn();

  }
 
  var googleUrl = function (sourceIdentifier) {
  
    this.sourceIdentifier = sourceIdentifier;
    if (this.sourceIdentifier.match(/http(s)*:/)) {
      this.url = this.sourceIdentifier;
      try {
        this.key = this.url.replace(/.*key=/,'').replace(/&.*/,'');
      } catch (error) {
        this.key = this.url.match(/(cells|list)\/(.*?)\//)[2];
      }
    } else {
      this.key = this.sourceIdentifier;
    }    
    return "http://spreadsheets.google.com/feeds/cells/" + this.key + "/od6/public/values?alt=json-in-script&callback=?";
  }

  function isNormalInteger(str) {
    var n = ~~Number(str);
    return String(n) === str && n >= 0;
}



function addColumnStyleClass(input, className) {
  var colors = ['black', 'blue', 'brown', 'gray', 'green', 'orange', 'pink', 'purple', 'red', 'white', 'yellow'];
  var styles = ['bold', 'italic', 'underline'];

  var array = input.replace(" ", "").split(';');
  var color;
  var style = [];
  var size;


  for(var i = 0; i < array.length; i++) {
    
    var temp = array[i].toLowerCase();

    if(/^#[0-9A-F]{6}$/i.test(temp)) {
      color = temp;
    }
    else if(isNormalInteger(temp)) {
      size = temp;
    }
    else {

      for(var j=0; j<colors.length; j++) {
        if(temp == colors[j]) {
          color = colors[j]
          break;
        }
      }

      for(var k=0; k<styles.length; k++) {
        if(temp == styles[k]) {
          style[k] = styles[k];
          break;
        }
      }
    }
  }


  var columnStyle = '<style>' + className + ' {';

  if(color != null) {
    columnStyle += 'color: ' + color + ';';
  }

  if(style != null) {
    for(var i=0; i<style.length; i++) {
      var styleType = style[i];
      switch(style[i]) {
        case 'bold':
          columnStyle += 'text-weight: ' + styleType + ';';
          break;
        case 'italic':
          columnStyle += 'font-style: ' + styleType + ';';
          break;
        case 'underline':
          columnStyle += 'text-decoration: ' + styleType + ';';
          break;
      } 
    }
  }

  if(size != null) {
    columnStyle += 'font-size: ' + size + 'pt;';
  }

  columnStyle += '}</style>';

  $('html > head').append(columnStyle);
console.log(columnStyle);

}


</script>



]]>
</Content>
</Module>