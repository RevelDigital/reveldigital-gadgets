<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="Flight Status Gadget" description="Flight status gadget" author="RevelDigital" background="transparent">
  <UserPref name="airport_code" display_name="Airport Code" required="true" datatype="string" />
  <UserPref name="airport_gate" display_name="Airport Gate" required="true" datatype="string" />
  <UserPref name="num_hours" display_name="Number of hours" default_value="5" datatype="string" />
  <UserPref name="update_interval" display_name="Interval between data checks (minutes)" datatype="string" default_value="15" />
  



  <UserPref name="current-flight-style" display_name="Current Flight Style" datatype="style" default_value="font-family:Verdana;color:rgb(0, 0, 0);font-size:18px;" required="true" />
  <UserPref name="next-flight-style" display_name="Next Flight Style" datatype="style" default_value="font-family:Verdana;color:rgb(0, 0, 0);font-size:18px;" required="true" />
  <UserPref name="next-flight-header-style" display_name="Next Flight Header Style" datatype="style" default_value="font-family:Verdana;color:rgb(0, 0, 0);font-size:18px;" required="true" />

  <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
  <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
</ModulePrefs>
<Content type="html">
<![CDATA[



<style type="text/css">

  body {
    background: transparent;
  }

  #current_flight {
  	margin: auto;
  }

  #current_flight_table {
  	text-align:center;
    height:100%;
    width:100%;
    border-collapse:collapse;
    __UP_current-flight-style__;
    
  }

  #next_flight_table {
    text-align:left;
    width:100%;
    border-collapse:collapse;
    height:100%;
    __UP_next-flight-style__;
    
  }

  #header {
    __UP_next-flight-header-style__;
  }




</style>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>

<div id="current_flight">
<table id="current_flight_table">
  <tr>
    <div id="current_number"></div>
  </tr>
  <tr>
    <div id="current_location">Location: </div>
  </tr>
  <tr>
    <div id="current_time">Time: </div>
  </tr>
  <tr>
    <div id="current_status">Status: </div>
  </tr>
</table>
</div>

<div id="next_flight">
 <table id="next_flight_table"><tbody>
    <tr id="header"><th>Time</th><th>Flight #</th><th><div id='tofrom'>From</div></th><th>Airline</th><th>Status</th></tr>
  </tbody></table>
</div>


<script type="text/javascript">


var prefs = new gadgets.Prefs();


  function load() {
    flights = [];
    refresh('arr');
    
    setInterval(refresh, 5 * 60 * 1000);
  }
  
gadgets.util.registerOnLoadHandler(load);

</script>



<script type="text/javascript">

  function clearFlights() {
  	try {
  		document.getElementById("next_flight_table").deleteRow(1);	
  	}
  	catch(e) {

  	}
    
  }



  function compareTime(code) {
    return function(a, b) {
      var testA;
      var testB;

      if(a.arrivalAirportFsCode == code) {
        testA = a.arrivalDate.dateUtc;
      }
      else {
        testA = a.departureDate.dateUtc;
      }

      if(b.arrivalAirportFsCode == code) {
        testB = b.arrivalDate.dateUtc;
      }
      else {
        testB = b.departureDate.dateUtc;
      }

      if (testA < testB) {
      return -1;
      } 
      if (testA > testB) {
        return 1;
      }
      return 0;


    }
  }








  function getStatus(arg) {
    switch(arg) {
      case 'S':
        return "On Time";
        break;
      case 'A':
        return "On Time";
        break;
      case 'C':
        return "Canceled";
          break;
      case 'D':
        return "Diverted";
        break;
      case 'L':
        return "Landed";
        break;
      case 'R':
        return "Redirected";
        break;
      case 'U':
        return "Unknown";
        break;
      case 'NO':
        return "Not Operational";
        break;
      default:
        return "Unknown";
        break;
    }
  }

  function timeConvert (time) {
    
    time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

    if (time.length > 1) { 
      time = time.slice (1);
      time.pop();
      time[5] = +time[0] < 12 ? ' AM' : ' PM';
      time[0] = +time[0] % 12 || 12;
    }
    return time.join ('');
  }


  function refresh(toggle) {

    clearFlights();

    var currentDate = new Date();
    var month = currentDate.getMonth() + 1;
    var day = currentDate.getDate();
    var year = currentDate.getFullYear();
    var hour = currentDate.getHours();
    var arriveOrDepart = toggle;
    var airportCode = 'MSP';
    var numHours = '6';
 



    var url = 'https://api.flightstats.com/flex/flightstatus/rest/v2/jsonp/airport/status/' + airportCode + '/' + arriveOrDepart + '/' + year + '/' + month + '/' + day + '/' + hour + '?appId=27a8b478&appKey=b725f70889570f69748fa69f783be1fe&utc=false&numHours=' + numHours;

    $.ajax({
      url: url,
      dataType: 'JSONP',
      type: 'GET',
      success: function (data) {

       result(data, toggle);

          
      }
    });




  }

  function result(data, toggle) {
        
        var gate = 'A13';


        var rowCounter = 1;
        
        for (var i = 0; i < data.flightStatuses.length; i++) {
          var currentFlight = data.flightStatuses[i];
          

          if(toggle == 'arr') {
            try {
              gateCheck = currentFlight.airportResources.arrivalGate;  
            }
            catch(e) {
              console.log(e);
            }
            
          }
          else {
            try {
              gateCheck = currentFlight.airportResources.departureGate;  
            }
            catch(e) {
              console.log(e);
            }
            
          }

          if(gateCheck == gate) {
            flightObject=new Object();
            flightObject.data = data;
            flightObject.flight = currentFlight;
            flights.push(flightObject);
            console.log(flights.length);
          }

        }



        if(toggle == 'dep') {
          flights.sort(compareTime);
          console.log(flights);
          try {
            showCurrentFlight(flights[1]);
          }
          catch(e) {

          }
          try {
            showNextFlight(flights[0]);
          }
          catch(e) {

          }
        }
        else {
          refresh('dep');
        }

         

            

  }


  function showCurrentFlight(flight) {

    var arrivalToggle = false;

    var data = flight.data;
    var flight = flight.flight;

    console.log("code: " + flight.arrivalAirportFsCode)

    if(flight.arrivalAirportFsCode == 'MSP') {
      arrivalToggle = true;
    }





    $('#current_number').text('Flight #: ' + flight.flightNumber);

    if(arrivalToggle) {
      var arrivalTime = new Date(flight.arrivalDate.dateUtc);

      for(var k = 0; k < data.appendix.airports.length; k++) {
       if(flight.departureAirportFsCode == data.appendix.airports[k].fs) {
          $('#current_location').text('From: ' + data.appendix.airports[k].city + " - " + data.appendix.airports[k].faa);
        }
      }

      $('#current_time').text('Arrival: ' + timeConvert(arrivalTime.toLocaleTimeString()));
    }
    else {
      var depatureTime = new Date(flight.departureDate.dateUtc);

      for(var k = 0; k < data.appendix.airports.length; k++) {
        if(flight.arrivalAirportFsCode == data.appendix.airports[k].fs) {
          $('#current_location').text('Destination: ' + data.appendix.airports[k].city + " - " + data.appendix.airports[k].faa);
        }
      }

      $('#current_time').text('Departure: ' + timeConvert(depatureTime.toLocaleTimeString()));
    }
    
    $('#current_status').text('Status: ' + getStatus(flight.status));



  }



  function showNextFlight(flight) {

          var arrivalToggle = false;
          var data = flight.data;
          var flight = flight.flight;

          if(flight.arrivalAirportFsCode == 'MSP') {
            arrivalToggle = true;
            $('#toFrom').text('To');
          }

          
          
           



          var cells = [];
          var arrivalTime = new Date(flight.arrivalDate.dateUtc);
          var depatureTime = new Date(flight.departureDate.dateUtc);
          var table = document.getElementById("next_flight_table");
          var row = table.insertRow(1);

    
 


          for(var j = 0; j < 6; j++) {
            cells[j] = row.insertCell(j);
          }

          cells[1].innerHTML = flight.flightNumber;
          cells[4].innerHTML = getStatus(flight.status);
          
          for(var l = 0; l < data.appendix.airlines.length; l++) {
            if(flight.carrierFsCode == data.appendix.airlines[l].fs) {
              cells[3].innerHTML = data.appendix.airlines[l].name;
            }
          }
          

          

          if(arrivalToggle) {
            for(var k = 0; k < data.appendix.airports.length; k++) {
              if(flight.departureAirportFsCode == data.appendix.airports[k].fs) {
                cells[2].innerHTML = data.appendix.airports[k].city + " - " + data.appendix.airports[k].faa;
              }
            }
            try {
              cells[0].innerHTML = timeConvert(arrivalTime.toLocaleTimeString());
            }
            catch(e) {
              console.log(e);
            }    
          }
          else {
            for(var k = 0; k < data.appendix.airports.length; k++) {
              if(flight.arrivalAirportFsCode == data.appendix.airports[k].fs) {
                cells[2].innerHTML = data.appendix.airports[k].city + " - " + data.appendix.airports[k].faa;
              }
            }
            try {
              cells[0].innerHTML = timeConvert(depatureTime.toLocaleTimeString());
            }
            catch(e) {
              console.log(e);
            }
          }
  }



</script>


]]>
</Content>
</Module>