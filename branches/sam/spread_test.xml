<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="RevelDigital Google Spreadsheet Gadget" description="Basic tabular display of Google spreadsheet data" author="RevelDigital" background="transparent">
  <UserPref name="spreadsheetUrl" display_name="Published spreadsheet URL" datatype="string" />
  <UserPref name="background_transparent" display_name="Make table background transparent?" default_value="no" datatype="enum" >
    <EnumValue value="yes" display_value="Yes" />
    <EnumValue value="no" display_value="No" />
  </UserPref>
  <UserPref name="ForeColor" datatype="hidden" />
  <UserPref name="BackColor" datatype="hidden" />
</ModulePrefs>
<Content type="html">
<![CDATA[


<head>
</head>
<body>
<table class="tblGenFixed" id="googleTable">
</table>
</body>

<style type="text/css">

body {
  background-color: transparent;
}




</style>


<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script type="text/javascript">


var prefs = new gadgets.Prefs();

//initialize and setup interval for updates
function load() {
	console.log("Version: " + 11);
	rowHeights = [];
  	update();
  	setInterval(update, 120000);
}

gadgets.util.registerOnLoadHandler(load);

//used to compare and see if the data is new and needs
//to be refreshed
var oldCss = null;
var oldTable = null;


//make spreadsheet url usable and then get the html table from google docs
function update() {
  var googleUrl = prefs.getString("spreadsheetUrl");
  googleUrl = googleUrl.substring(googleUrl.indexOf("key=")+4, googleUrl.indexOf("&output"));
  getTable(googleUrl);
}


//get the css from the head of the google docs page
//check if there are any changes, if not dont update
//apply it to the table
//check if the user wants the background to be transparent
//and give the user their wish
function getCss(code) {

  var url = "https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20html%20where%20url%3D%22https%3A%2F%2Fdocs.google.com%2Fspreadsheet%2Fpub%3Fkey%3D" + code + "%26amp%3Bamp%3Bamp%3Bamp%3Bamp%3Boutput%3Dhtml%22%20and%20xpath%3D'%2Fhtml%2Fhead%2Fstyle'&diagnostics=true";

  $.ajax({
    url: url,
    dataType: 'JSONP',
    type: 'GET',
    success: function (data) {

        if(oldCss != data.results[0].replace(/border/g, "")) {
          oldCss = data.results[0].replace(/border/g, "");
           $("head").append(data.results[0].replace(/border/g, ""));

          if(prefs.getString("background_transparent") == "yes") {
            $("#googleTable td").css("background-color", "transparent");
          }
      
        }

        $('#googleTable tr').each(function(index) {
        	
		  $(this).height(rowHeights[index]);
		});

    }
  });
}

//get table data from google docs
//only update if the table has new data in it
//then call get css for formatting of table
function getTable(code) {

  var url = "https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20html%20where%20url%3D%22https%3A%2F%2Fdocs.google.com%2Fspreadsheet%2Fpub%3Fkey%3D" + code + "%26amp%3Bamp%3Bamp%3Bamp%3Boutput%3Dhtml%22%20and%20xpath%3D%22%2F%2Ftable%5B%40class%3D'tblGenFixed'%5D%22%0A&diagnostics=true";

  $.ajax(
{    url: url,
    dataType: 'JSONP',
    type: 'GET',
    success: function (data) {

      if(oldTable != data.results[0]) {
      	rowHeights.length = 0;
        oldTable = data.results[0];
        $("#googleTable").empty();
        $('#googleTable').html(data.results[0]);

        $('#googleTable td:first-child').each(function(index) {
			rowHeights.push($(this).find('p').css('height'));
			console.log("Row: " + index + "Height: " + rowHeights[index]);
		});

        $('#googleTable td:first-child').remove();
        
      }


       
      

      getCss(code);

    }
  });
}


</script>
]]>
</Content>
</Module>