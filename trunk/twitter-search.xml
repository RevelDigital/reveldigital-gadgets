<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="RevelDigital Twitter Search Gadget" description="Displays tweets from a search in a Twitter widget" author="RevelDigital" background="transparent">
  <UserPref name="searchQuery" display_name="Search Query" datatype="string" />
  <UserPref name="numTweets" display_name="Number of Tweets" datatype="string" default_value="30" />
</ModulePrefs>
<Content type="html">
<![CDATA[

<style type="text/css">
body *
{
  font-family: Verdana, arial, sans-serif; 
  line-height: 1.2em; 
  letter-spacing: 0; 
  word-spacing: normal; 
}

body
{
  background: transparent;
}

a
{
  text-decoration: none;
  color: #0A5DC3;
}

img
{
-moz-border-radius: 5px;
border-radius: 5px;
-moz-box-shadow: 2px 2px 4px #777;
-webkit-box-shadow: 2px 2px 4px #777;
box-shadow: 2px 2px 4px #777;
}

div.tweetscontainer
{
  text-align: left;
  overflow: hidden;
}

div.tweet
{
  display:block;
}

.item
{
  padding: 20px 5px;
  border-bottom: solid 1px #ccc;
}

.avatar
{
  float: left;
  overflow: hidden;
  display: block;
  width: 80px;
  height: 80px;
}

.text
{
  margin-left: 90px;
}

h2 {
  font-size: 150%;
  padding: 0;
  margin: 0;
}

h3
{
  margin: 0;
  padding: 0;
  font-size: 140%;
  font-weight: normal;
}

span.when
{
  display:block;
  opacity: 0.7;
  margin-top: 2px;
}
</style>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script charset="utf-8" src="http://widgets.twimg.com/j/2/widget.js"></script>

<div class="tweetscontainer">
</div>

<script type="text/javascript">

  var prefs = new gadgets.Prefs();

  function load() {
  
    $("div.tweetscontainer").height($(window).height()).width($(window).width());
    $("div.tweetscontainer").css("color", prefs.getString("ForeColor"));
    $("div.tweetscontainer").css("background-color", prefs.getString("BackColor"));
    
    update();
    
    setInterval(update, 30000);
  }

  gadgets.util.registerOnLoadHandler(load);
</script>

<script type="text/javascript">

  var max_id = 0;
  
  var update = function () {
  
    var url="http://search.twitter.com/search.json?rpp=5&since_id=" + max_id + "&callback=?&q=";
    var query = escape( query=prefs.getString("searchQuery") );
    var display = '<div class="tweetDisplayContainer error">no records found</div>';
    var urirex = /(https?):\/\/+([\w\d:#@%\/;$()~_?\+-=\\\.&]*)/g;
    var hashrex = /\#+([\w\d:#@%/;$()~_?\+-=\\\.&]*)/g;
    var thashuri = "http://search.twitter.com/search?q=%23";
  
    $.getJSON(url+query, function(json){

      if(json) {
        max_id = json.max_id;
        var display = '';
        $.each(json.results,function(i,tweet) {
          display += '<div class="item">';
          ttext = tweet.text.replace(urirex, '<a href="$1://$2" title="">$2</a>');
          ttext = ttext.replace(hashrex, '<a href="' + thashuri  + '$1" title="">#$1</a>');
          display += '<div class="avatar tweet' + i + '">' +
            '<img src="' + tweet.profile_image_url.replace(/_normal\./, '_bigger.') + '"  />' + 
            '</div>' +
            '<div class="text tweet' + i + '">' +
            '<h2><a href="http://twitter.com/' + tweet.from_user + 
            '" title="tweets by ' + tweet.from_user + 
            '">@' + tweet.from_user + '</a></h2>' + 
            '<h3>' + ttext + '</h3>' + '<span class="when" data-timestamp="' + tweet.created_at + '">' + timeAgo(tweet.created_at) + '</span>' +
            '</div></div>';
        });
        $(display).hide().prependTo("div.tweetscontainer").fadeIn();
        
        $("span.when").each(function (idx) {
          $(this).text(timeAgo($(this).data("timestamp")));
        });
      }
    });
  }

  var timeAgo = function (dateString) {
    var rightNow = new Date(),
    then = new Date(dateString),
    diff = rightNow - then,
    second = 1000,
    minute = second * 60,
    hour = minute * 60,
    day = hour * 24,
    week = day * 7;
  
    if (isNaN(diff) || diff < 0) {
      return "";	//Return blank string if unknown
    }
  
    if (diff < second * 2) {
      return "right now";
    }
  
    if (diff < minute) {
      return Math.floor(diff / second) + " seconds ago";
    }
  
    if (diff < minute * 2) {
      return "about 1 minute ago";
    }
  
    if (diff < hour) {
      return Math.floor(diff / minute) + " minutes ago";
    }
  
    if (diff < hour * 2) {
      return "about 1 hour ago";
    }
  
    if (diff < day) {
      return  Math.floor(diff / hour) + " hours ago";
    }
  
    if (diff > day && diff < day * 2) {
      return "yesterday";
    }
  
    if (diff < day * 365) {
      return Math.floor(diff / day) + " days ago";
    }
    else {
      return "over a year ago";
    }
  }
</script>
]]>
</Content>
</Module>