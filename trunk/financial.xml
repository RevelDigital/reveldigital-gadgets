<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="RevelDigital Financial Gadget" description="Basic financials for a user defined list of stock symbols" author="RevelDigital" background="transparent">
  <UserPref name="symbols" display_name="Stock Symbols (eg. MSFT,AIG,JPM)" datatype="string" />
  <UserPref name="ForeColor" datatype="hidden" />
  <UserPref name="BackColor" datatype="hidden" />
  <UserPref name="fontFamily" display_name="Font Family" default_value="verdana" datatype="enum" >
    <EnumValue value="times new roman" display_value="Times New Roman" />
    <EnumValue value="courier new" display_value="Courier New" />
    <EnumValue value="verdana" display_value="Verdana" />
    <EnumValue value="arial" display_value="Arial" />
    <EnumValue value="tahoma" display_value="Tahoma" />
    <EnumValue value="impact" display_value="Impact" />
  </UserPref>
  <UserPref name="fontSize" display_name="Font Size" default_value="medium" datatype="enum" >
    <EnumValue value="xx-small" display_value="XX Small" />
    <EnumValue value="x-small" display_value="X Small" />
    <EnumValue value="small" display_value="Small" />
    <EnumValue value="medium" display_value="Medium" />
    <EnumValue value="large" display_value="Large" />
    <EnumValue value="x-large" display_value="X Large" />
    <EnumValue value="xx-large" display_value="XX Large" />
  </UserPref>
</ModulePrefs>
<Content type="html">
<![CDATA[

<style type="text/css">
body *
{
  line-height: 1.2em; 
  letter-spacing: 0; 
  word-spacing: normal; 
  font-family: __UP_fontFamily__;
  font-size: __UP_fontSize__;
}

body
{
  background: transparent;
}

div.quotescontainer
{
  text-align: left;
  overflow: hidden;
  background-color: #__UP_BackColor__;
}

div.quotescontainer table
{
  color: #__UP_ForeColor__;
}

.symbol
{
  font-size: 150%;
  text-align: left;
  font-weight: bold;
}

table
{
  width: 100%;
}

td, th
{
  padding: 10px;
}

th
{
  font-weight: bold;
  font-color: #888;
  font-size: 120%;
  text-align: right;
  text-shadow: 2px 2px 2px #ccc;
}

img
{
  height: 32px;
  width: 32px;
}

.value
{
  font-size: 150%;
  text-align: right;
}

.when
{
  opacity: 0.7;
  margin-top: 2px;
  text-align: right;
}
</style>

<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>

<div class="quotescontainer">
  <table>
    <thead>
      <tr>
        <th></th>
        <th>Last</th>
        <th></th>
        <th>Change</th>
        <th>% Change</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>

<script type="text/javascript">

  var prefs = new gadgets.Prefs();

  function load() {

    $("div.quotescontainer").height($(window).height()).width($(window).width());
    
    update();
    
    setInterval(update, 120000);
  }

  gadgets.util.registerOnLoadHandler(load);
</script>

<script type="text/javascript">

  var max_id = 0;
  
  var update = function () {

    var query = 'select * from yahoo.finance.quotes where symbol in ("' + prefs.getString("symbols") + '")';
    var env = "store://datatables.org/alltableswithkeys";
    var url = "https://query.yahooapis.com/v1/public/yql?q=" + escape(query) + "&env=" + escape(env) + "&format=json&callback=?";
  
    $.getJSON(url, function(json) {

      if (json && json.query.count > 0) {
      
        $("div.quotescontainer > table > tbody").empty();
        
        var display = '';
        var when = '';
        $.each(json,function(i, quote) {
          display += '<tr class="item">';
          display += '<td class="symbol">' + quote.symbol + '</td>';
          display += '<td class="value">' + quote.LastTradePriceOnly + '</td>';
          if (parseFloat(quote.ChangeRealtime) >= 0) {
            display += '<td class="icon"><img src="https://reveldigital-gadgets.googlecode.com/svn/trunk/images/up_arrow_48.png" alt=""/></td>';
          } else {
            display += '<td class="icon"><img src="https://reveldigital-gadgets.googlecode.com/svn/trunk/images/down_arrow_48.png" alt=""/></td>';
          }
          display += '<td class="value">' + quote.ChangeRealtime + '</td>';
          display += '<td class="value">' + quote.PercentChange + '%</td>';
          display += '</tr>';
          when = quote.LastTradeTime;
        });
        display += '<tr><td class="when" colspan="5">Last updated: ' + when + '</td></tr>';
        
        $(display).hide().prependTo("div.quotescontainer > table > tbody").fadeIn();
      }
    });
  }

  var timeAgo = function (dateString) {
    var rightNow = new Date(),
    then = new Date(dateString),
    diff = rightNow - then,
    second = 1000,
    minute = second * 60,
    hour = minute * 60,
    day = hour * 24,
    week = day * 7;
  
    if (isNaN(diff) || diff < 0) {
      return "";	//Return blank string if unknown
    }
  
    if (diff < second * 2) {
      return "right now";
    }
  
    if (diff < minute) {
      return Math.floor(diff / second) + " seconds ago";
    }
  
    if (diff < minute * 2) {
      return "about 1 minute ago";
    }
  
    if (diff < hour) {
      return Math.floor(diff / minute) + " minutes ago";
    }
  
    if (diff < hour * 2) {
      return "about 1 hour ago";
    }
  
    if (diff < day) {
      return  Math.floor(diff / hour) + " hours ago";
    }
  
    if (diff > day && diff < day * 2) {
      return "yesterday";
    }
  
    if (diff < day * 365) {
      return Math.floor(diff / day) + " days ago";
    }
    else {
      return "over a year ago";
    }
  }
</script>
]]>
</Content>
</Module>