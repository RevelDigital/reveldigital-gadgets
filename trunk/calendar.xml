<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="RevelDigital Google Spreadsheet Gadget" description="Basic tabular display of Google spreadsheet data" author="RevelDigital" background="transparent">
  <UserPref name="calendarUrl" display_name="Google Calendar URL" datatype="string" />
  <UserPref name="displayFormat" display_name="Display Format"  datatype="enum" default_value="div">
    <EnumValue value="div" display_value="Consolidated" />
    <EnumValue value="table" display_value="Tabular" />
  </UserPref>
  <UserPref name="showHeader" display_name="Show Table Header" datatype="bool" default_value="true" />
  <UserPref name="maxResults" display_name="Max Number of Events" datatype="string" default_value="15" />
  <UserPref name="searchQuery" display_name="Search Query" datatype="string" />
  <UserPref name="fontFamily" display_name="Font Family" default_value="verdana" datatype="enum" >
    <EnumValue value="times new roman" display_value="Times New Roman" />
    <EnumValue value="courier new" display_value="Courier New" />
    <EnumValue value="verdana" display_value="Verdana" />
    <EnumValue value="arial" display_value="Arial" />
    <EnumValue value="tahoma" display_value="Tahoma" />
    <EnumValue value="impact" display_value="Impact" />
  </UserPref>
  <UserPref name="fontSize" display_name="Font Size" default_value="medium" datatype="enum" >
    <EnumValue value="xx-small" display_value="XX Small" />
    <EnumValue value="x-small" display_value="X Small" />
    <EnumValue value="small" display_value="Small" />
    <EnumValue value="medium" display_value="Medium" />
    <EnumValue value="large" display_value="Large" />
    <EnumValue value="x-large" display_value="X Large" />
    <EnumValue value="xx-large" display_value="XX Large" />
  </UserPref>
</ModulePrefs>
<Content type="html">
<![CDATA[

<style type="text/css">
body *
{
  line-height: 1.2em; 
  letter-spacing: 0; 
  word-spacing: normal; 
}

body
{
  background: transparent;
}

table
{
  width: 100%;
  display: none;
}

thead
{
  display: none;
}

td, th
{
  font-size: 140% !important;
  padding: 8px;
}

th
{
  font-weight: bold;
  font-color: #888;
  text-align: left;
  text-shadow: 2px 2px 2px #888;
}

h2
{
  font-size: 180% !important;
  padding: 0;
  margin: 0;
}

h3
{
  margin: 0;
  padding: 0;
  font-size: 140% !important;
  font-weight: normal;
}


.entry
{
  padding: 20px 5px;
  border-bottom: solid 1px #ccc;
}

.when
{
  display:block;
  opacity: 0.7;
  margin-top: 2px;
  font-size: 90% !important;
}
</style>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script src="http://reveldigital-gadgets.googlecode.com/files/date.format.js" type="text/javascript"></script>

<div id="data">
  <table id="output">
    <thead>
      <tr>
        <th>When</th>
        <th>Event</th>
        <th>Location</th>
      </tr>
    </thead>
  </table>
</div>

<script type="text/javascript">

  var prefs = new gadgets.Prefs();

  function load() {
  
    $("body").prepend("<style type=\"text/css\"> body * { font-family: '" + prefs.getString("fontFamily") + "'; } </style>");
    $("body").prepend("<style type=\"text/css\"> body * { font-size: " + prefs.getString("fontSize") + "; } </style>");
    $("#data").height($(window).height()).width($(window).width());
    $("#data table").css("color", prefs.getString("ForeColor"));
    $("#event-container").css("color", prefs.getString("ForeColor"));
    $("#data").css("background-color", prefs.getString("BackColor"));
    
    if (prefs.getString("displayFormat") == "table") {
      $("#output").show();
    }
    if (prefs.getBool("showHeader") == true) {
      $("#output thead").show();
    }
    update();
    
    setInterval(update, 120000);
  }

  gadgets.util.registerOnLoadHandler(load);
</script>

<script type="text/javascript">

  var max_id = 0;
  
  var update = function () {

    var url = googleUrl(prefs.getString("calendarUrl"));
    
    $.getJSON(url, function (json){
      if (json) {
        if (prefs.getString("displayFormat") == "table") {
          formatTable(json);
        } else {
          formatDiv(json);
        }
      }
    });
  }

function formatDiv(json) {

  $("#data").empty();

  if (!("entry" in json.feed)) {
    return;
  }
  
  var container = $("<div id=\"event-container\"></div>");
  
  for (var i=0; i<json.feed.entry.length; i++) {
  
    var entry = json.feed.entry[i];
    var title = entry.title.$t;
    var where = entry['gd$where'][0].valueString;
    var start = GCalTime(entry['gd$when'][0].startTime);
    var end = GCalTime(entry['gd$when'][0].endTime);
    
    var div = $("<div class=\"entry\"></div>");
    
    var h2 = $("<h2></h2>");
    h2.text(title);
    $(div).append(h2);
    
    if (where != '') {
      var h3 = $("<h3></h3>");
      h3.text(where);
      $(div).append(h3);
    }
    var startDate = start.format("dddd, mmmm dS");
    var endDate = end.format("dddd, mmmm dS");
    var startTime = start.format("h:MM TT");
    var endTime = end.format("h:MM TT");
    
    var span = $("<span class=\"when\"></span>");
    
    if ((start.getDate() + 1 == end.getDate()) &&
      (start.getHours() == 0 && end.getHours() == 0) &&
      (start.getMinutes() == 0 && end.getMinutes() == 0)) {
      span.text(startDate);
    } else if (start.getDate() == start.getDate()) {
      span.text(startDate + ", " + startTime + " - " + endTime);
    } else {
      span.text(startDate + ", " + startTime + " - " + endDate + ", " + endTime);
    }
    $(div).append(span);
    
    $("#event-container").append(div);
  }
  $("#data").append(container);
}

function formatTable(json) {

    $("#data table tbody").empty();
    
    if (!("entry" in json.feed)) {
      return;
    }
    
    var tbody = $("<tbody></tbody>");
    
    var tr;
    for (var i=0; i<json.feed.entry.length; i++) {
  
      var entry = json.feed.entry[i];
      var title = entry.title.$t;
      var where = entry['gd$where'][0].valueString;
      var start = GCalTime(entry['gd$when'][0].startTime);
      var end = GCalTime(entry['gd$when'][0].endTime);
      
      var startDate = start.format("dddd, mmmm dS");
      var endDate = end.format("dddd, mmmm dS");
      var startTime = start.format("h:MM TT");
      var endTime = end.format("h:MM TT");
      
      var tr = $('<tr/>');
      
      var td;
      td = $("<td class=\"date\"/>");
      if ((start.getDate() + 1 == end.getDate()) &&
        (start.getHours() == 0 && end.getHours() == 0) &&
        (start.getMinutes() == 0 && end.getMinutes() == 0)) {
        td.text(startDate);
      } else if (start.getDate() == start.getDate()) {
        td.text(startDate + ", " + startTime + " - " + endTime);
      } else {
        td.text(startDate + ", " + startTime + " - " + endDate + ", " + endTime);
      }
      $(tr).append(td);
      
      td = $("<td class=\"title\"/>");
      td.text(title);
      $(tr).append(td);
      
      td = $("<td class=\"where\"/>");
      $(td).text(where);
      $(tr).append(td);
      
      $(tbody).append(tr);
    }
    
    $(tbody).hide().appendTo("#data > table").fadeIn();
}

/**
 * Converts an xs:date or xs:dateTime formatted string into the local timezone
 * and outputs a human-readable form of this date or date/time.
 *
 * @param {string} gCalTime is the xs:date or xs:dateTime formatted string
 * @return {string} is the human-readable date or date/time string
 */
function GCalTime(gCalTime) { 
  // text for regex matches
  var remtxt = gCalTime;

  function consume(retxt) {
    var match = remtxt.match(new RegExp('^' + retxt));
    if (match) {
      remtxt = remtxt.substring(match[0].length);
      return match[0];
    }
    return '';
  }

  // minutes of correction between gCalTime and GMT
  var totalCorrMins = 0;

  var year = consume('\\d{4}');
  consume('-?');
  var month = consume('\\d{2}');
  consume('-?');
  var dateMonth = consume('\\d{2}');
  var timeOrNot = consume('T');

  // if a DATE-TIME was matched in the regex 
  if (timeOrNot == 'T') {
    var hours = consume('\\d{2}');
    consume(':?');
    var mins = consume('\\d{2}');
    consume('(:\\d{2})?(\\.\\d{3})?');
    var zuluOrNot = consume('Z');

    // if time from server is not already in GMT, calculate offset
    if (zuluOrNot != 'Z') {
      var corrPlusMinus = consume('[\\+\\-]');
      if (corrPlusMinus != '') {
        var corrHours = consume('\\d{2}');
        consume(':?');
        var corrMins = consume('\\d{2}');
        totalCorrMins = (corrPlusMinus=='-' ? 1 : -1) * 
            (Number(corrHours) * 60 + 
            (corrMins=='' ? 0 : Number(corrMins)));
      }
    }

    // get time since epoch and apply correction, if necessary
    // relies upon Date object to convert the GMT time to the local
    // timezone
    var originalDateEpoch = Date.UTC(year, month - 1, dateMonth, hours, mins);
    var gmtDateEpoch = originalDateEpoch + totalCorrMins * 1000 * 60;
    var ld = new Date(gmtDateEpoch);

    return ld;
  } else {
    // if only a DATE was matched
    //dateString = parseInt(month, 10) + '/' + parseInt(dateMonth, 10);
    return new Date(year, month - 1, dateMonth, 0, 0);
  }
  //return dateString;
}

var googleUrl = function (sourceIdentifier) {

    this.sourceIdentifier = sourceIdentifier;
    
    if (this.sourceIdentifier.match(/http(s)*:/)) {
      this.url = this.sourceIdentifier;
      try {
        this.key = this.url.match(/feeds\/(.*?)\/public\//)[1] + "/public";
      } catch (error) {
        var match = this.url.match(/feeds\/(.*?)\/private-(.*?)\//);
        this.key = match[1] + "/private-" + match[2];
      }
    } else {
      this.key = this.sourceIdentifier + "/public";
    }
    var ret = "https://www.google.com/calendar/feeds/" + this.key + "/full?alt=json-in-script&callback=?&orderby=starttime&max-results=" + prefs.getInt("maxResults") + "&singleevents=true&sortorder=ascending&futureevents=true";
    if (prefs.getString("searchQuery") != "") {
      ret = ret + "&q=" + encodeURI(prefs.getString("searchQuery"));
    }
    return ret;
}
</script>
]]>
</Content>
</Module>