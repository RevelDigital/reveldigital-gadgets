<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="RevelDigital Facebook Gadget" description="Displays Facebook posts from your linked account." author="RevelDigital" background="transparent">
  <UserPref name="numItems" display_name="Number of posts visible at the same time"  datatype="string" default_value="3" />
  <UserPref name="maxItems" display_name="Maximum number of posts to retrieve from Facebook"  datatype="string" default_value="10" />
  <UserPref name="userId" display_name="Facebook User (use 'me' for your own posts)"  datatype="string" default_value="me" />
  <UserPref name="pause" display_name="Delay in seconds between post scrolling" datatype="string" default_value="5" />
  <UserPref name="showSeparator" display_name="Show Separator" datatype="bool" default_value="true" />
  <UserPref name="imageSize" display_name="Image Size" datatype="enum" default_value="small">
    <EnumValue value="small" display_value="Small" />
    <EnumValue value="large" display_value="Large" />
  </UserPref>
  <UserPref name="body-style" display_name="Body Style" datatype="style" default_value="font-family:Verdana;color:#FFFFFF;font-size:24px;" required="true" />
  <UserPref name="link-style" display_name="Link Style" datatype="style" default_value="font-family:Verdana;color:#0A5DC3;font-size:24px;" required="true" />
  <UserPref name="ForeColor" datatype="hidden" />
  <UserPref name="BackColor" datatype="hidden" />
  <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
  <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
  <UserPref name="regkey" display_name="Device Registration Key" datatype="hidden" default_value="*|DEVICE.REGISTRATIONKEY|*" />
</ModulePrefs>
<Content type="html">
<![CDATA[

<style type="text/css">
body *
{
  line-height: 1.2em; 
  letter-spacing: 0; 
  word-spacing: normal;
}

body
{
  background: transparent;
  width: __UP_rdW__px;
  height: __UP_rdH__px;
  overflow: hidden;
}

a
{
  __UP_link-style__;
  text-decoration:none;
}

a:hover,a:visited,a:active,a:link
{
  __UP_link-style__;
  text-decoration:none;
}

img
{
  -moz-border-radius: 5px;
  border-radius: 5px;
}

ul, p
{
  padding: 0;
  margin: 0;
}

div.postscontainer
{
  text-align: left;
  overflow: hidden;
  __UP_body-style__;
  background-color: #__UP_BackColor__;
}

div.post
{
  display: block;
}

.item
{
  padding: 10px 5px;
  border-bottom: solid 1px #ccc;
}

.avatar-small
{
  float: left;
  overflow: hidden;
  display: block;
  width: 80px;
  height: 80px;
}

.avatar-small img
{
  width: 80px;
  height: 80px;
}

.avatar-large
{
  float: left;
  overflow: hidden;
  display: block;
  width: 130px;
  height: 130px;
}

.avatar-large img
{
  width: 130px;
  height: 130px;
}

.text-small
{
  margin-left: 90px;
}

.text-large
{
  margin-left: 140px;
}

span.when
{
  display:block;
  opacity: 0.7;
  margin-top: 2px;
  font-size: 90%;
}
</style>

<script type="text/javascript" src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
<script type="text/javascript" src="https://reveldigital-gadgets.googlecode.com/svn/third-party/jquery.vticker.js"></script>

<div class="postscontainer">
  <ul></ul>
</div>

<script type="text/javascript">

  var prefs = new gadgets.Prefs();

  function load() {
  
    update();
    
    setInterval(update, 1000 * 60 * 10); // 10 min update
  }
  
  gadgets.util.registerOnLoadHandler(load);
</script>

<script type="text/javascript">

  var max_id;
  
  var update = function () {
  
    var key = prefs.getString("regkey");
    if (key == "*|DEVICE.REGISTRATIONKEY|*") { // default key for preview
      key = "68f45389-0213-441b-b69d-4e35ef94bb20";
    }
    var url = 'https://svc1.reveldigital.com/facebook/' + prefs.getString('userId') + '/posts/' + key + '?format=json&limit=' + prefs.getInt('maxItems') + '&callback=?';
    var display = '<div class="error">no records found</div>';
    var urirex = /(https?):\/\/+([\w\d:#@%\/;$()~_?\+-=\\\.&]*)/g;
    var imgClass = 'avatar-small';
    var txtClass = 'text-small';
    
    if (prefs.getString("imageSize") == "large") {
      imgClass = 'avatar-large';
      txtClass = 'text-large';
    }
    
    $.getJSON(url, function(json){

      if(json) {
        var display = '';
        $.each(json.data, function(i, post) {
          var desc = post.description;
          if (desc == null) {
            desc = "";
          }
          display += '<li><div class="item">';
          if (post.picture != null) {
            display += '<div class="' + imgClass + ' post' + i + '">' +
              '<img src="' + post.picture + '"  />' + 
              '</div>';
          }
          display += '<div class="' + txtClass + ' post' + i + '">';
          if (post.name != null) {
            display +=
              '<a href="' + post.link +
              '" title="post by ' + post.from.name + 
              '">' + post.name + '</a>';
          } 
          display += '<p>' + post.message + '</p>' +
            '<p>' + desc + '</p>' +
            '<span class="when" data-timestamp="' + post.created_time + '">' + timeAgo(post.created_time) + '</span>' +
            '</div><div style="clear:both;height:25px;"></div></div></li>';
        });
        $("div.postscontainer ul").html(display);
        
        try {
          $('div.postscontainer').vTicker.destroy();
        } catch (e) {
        }
        
        $('div.postscontainer').vTicker({
          showItems: prefs.getString("numItems"),
          pause: prefs.getInt("pause") * 1000,
          delay: 1000
        });
        
        if (prefs.getBool("showSeparator") == false) {
          $("div.postscontainer .item").css("border", "none");
        }
        $("span.when").each(function (idx) {
          $(this).text(timeAgo($(this).data("timestamp")));
        });
      }
    });
  }

  var timeAgo = function (dateString) {
    var rightNow = new Date(),
    then = Date.parse(dateString),
    diff = rightNow - then,
    second = 1000,
    minute = second * 60,
    hour = minute * 60,
    day = hour * 24,
    week = day * 7;
  
    if (isNaN(diff) || diff < 0) {
      return "";	//Return blank string if unknown
    }
  
    if (diff < second * 2) {
      return "right now";
    }
  
    if (diff < minute) {
      return Math.floor(diff / second) + " seconds ago";
    }
  
    if (diff < minute * 2) {
      return "about 1 minute ago";
    }
  
    if (diff < hour) {
      return Math.floor(diff / minute) + " minutes ago";
    }
  
    if (diff < hour * 2) {
      return "about 1 hour ago";
    }
  
    if (diff < day) {
      return  Math.floor(diff / hour) + " hours ago";
    }
  
    if (diff > day && diff < day * 2) {
      return "yesterday";
    }
  
    if (diff < day * 365) {
      return Math.floor(diff / day) + " days ago";
    }
    else {
      return "over a year ago";
    }
  }
</script>
]]>
</Content>
</Module>