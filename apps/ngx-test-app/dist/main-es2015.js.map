{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","C:/Users/mike_/Documents/GitHub/reveldigital-client-library/dist/reveldigital/player-client/__ivy_ngcc__/fesm2015/reveldigital-player-client.js","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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eAAe,uDAAS;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,oEAAoE,yCAAyC;AAC7G,4BAA4B,wEAAkB,EAAE,kDAAkD,kCAAkC,EAAE,kDAAkD;AACxL;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAS;AACxB;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA,SAAS;AACT;AACA;AACA,eAAe,uDAAS;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,uDAAS;AACxB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,0BAA0B,8DAAuB,EAAE,2BAA2B;AAC9E,0BAA0B,8DAAuB,EAAE,kDAAkD,wCAAwC,EAAE,iBAAiB;AAChK,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;;AAEA;AACA;AACA;;AAEmD;;AAEnD,sD;;;;;;;;;;;;AC/OA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main-es2015.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { PlayerClientService } from '@reveldigital/player-client';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  title = 'test-app';\n  localTime: any;\n  deviceTime: any;\n  TZName: any;\n  TZId: any;\n  TZOffset: any;\n  langCode: any;\n  deviceKey: any;\n  revelRoot: any;\n\n  constructor(public client: PlayerClientService) {\n\n    this.client.onCommand$.subscribe((cmd) => {\n      console.log(`Got command: ${cmd.name}, ${cmd.arg}`);\n    });\n  }\n\n  ngOnInit(): void {\n\n    setInterval(() => {\n      this.update();\n    }, 1000);\n  }\n\n  update() {\n\n    this.client.getDeviceTime().then((res) => {\n      this.localTime = new Date();\n      this.deviceTime = new Date(res);\n    });\n\n    this.client.getDeviceTimeZoneName().then((res) => {\n      this.TZName = res;\n    });\n\n    this.client.getDeviceTimeZoneID().then((res) => {\n      this.TZId = res;\n    })\n\n    this.client.getDeviceTimeZoneOffset().then((res) => {\n      this.TZOffset = res;\n    });\n\n    this.client.getLanguageCode().then((res) => {\n      this.langCode = res;\n    });\n\n    this.client.getDeviceKey().then((res) => {\n      this.deviceKey = res;\n    });\n\n    this.client.getRevelRoot().then((res) => {\n      this.revelRoot = res;\n    })\n\n  }\n\n  sendCommand() {\n\n    this.client.sendCommand(\"test\", \"it\");\n  }\n\n  trackEvent() {\n\n    this.client.track(\"test\", { \"a\": \"b\" });\n  }\n\n  callback() {\n\n    this.client.callback('test');\n  }\n}\n","<h2>Local Time: {{ localTime  | date:'medium' }}</h2>\n<h2>Device Time: {{ deviceTime  | date:'medium' }}</h2>\n<h2>Device TZ Name: {{ TZName }}</h2>\n<h2>Device TZ ID: {{ TZId }}</h2>\n<h2>Device TZ Offset: {{ TZOffset }}</h2>\n<h2>Device Language Code: {{ langCode }}</h2>\n<h2>Device Key: {{ deviceKey }}</h2>\n<h2>Revel Root: {{ revelRoot }}</h2>\n\n<button (click)=\"sendCommand()\">Send Command</button>\n<button (click)=\"trackEvent()\">Track Event</button>\n<button (click)=\"callback()\">Callback</button>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { LOCALE_ID } from '@angular/core';\nimport { APP_BASE_HREF, registerLocaleData } from '@angular/common';\n\nimport { AppComponent } from './app.component';\n\nimport { PlayerClientModule } from '@reveldigital/player-client';\n\nimport localeFr from '@angular/common/locales/fr';\nimport localeRu from '@angular/common/locales/ru';\nregisterLocaleData(localeFr);\nregisterLocaleData(localeRu);\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    PlayerClientModule\n  ],\n  providers: [\n    { provide: LOCALE_ID, useValue: \"fr\" },\n    { provide: APP_BASE_HREF, useValue: '/gadgets/ifr' }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { __awaiter } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport * as ɵngcc0 from '@angular/core';\nclass PlayerClientService {\r\n    constructor() {\r\n        this.onCommand$ = new Subject();\r\n        let self = this;\r\n        window.RevelDigital = {\r\n            Controller: {\r\n                onCommand: function (name, arg) {\r\n                    self.onCommand$.next({ name: name, arg: arg });\r\n                }\r\n            }\r\n        };\r\n        this.clientPromise = null;\r\n    }\r\n    callback(...args) {\r\n        this.getClient().then((client) => {\r\n            switch (args.length) {\r\n                case 0:\r\n                    client.callback();\r\n                    break;\r\n                case 1:\r\n                    client.callback(args[0]);\r\n                    break;\r\n                case 2:\r\n                    client.callback(args[1]);\r\n                    break;\r\n                case 3:\r\n                    client.callback(args[2]);\r\n                    break;\r\n                case 4:\r\n                    client.callback(args[3]);\r\n                    break;\r\n                case 5:\r\n                    client.callback(args[4]);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    getDeviceTime(date) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const client = yield this.getClient();\r\n            if (date !== undefined) {\r\n                return client.getDeviceTime(date);\r\n            }\r\n            return client.getDeviceTime();\r\n        });\r\n    }\r\n    getDeviceTimeZoneName() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const client = yield this.getClient();\r\n            return client.getDeviceTimeZoneName();\r\n        });\r\n    }\r\n    getDeviceTimeZoneID() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const client = yield this.getClient();\r\n            return client.getDeviceTimeZoneID();\r\n        });\r\n    }\r\n    getDeviceTimeZoneOffset() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const client = yield this.getClient();\r\n            return client.getDeviceTimeZoneOffset();\r\n        });\r\n    }\r\n    getLanguageCode() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const client = yield this.getClient();\r\n            return client.getLanguageCode();\r\n        });\r\n    }\r\n    getDeviceKey() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const client = yield this.getClient();\r\n            return client.getDeviceKey();\r\n        });\r\n    }\r\n    sendCommand(name, arg) {\r\n        this.getClient().then((client) => {\r\n            client.sendCommand(name, arg);\r\n        });\r\n    }\r\n    track(eventName, properties) {\r\n        this.getClient().then((client) => {\r\n            client.track(eventName, JSON.stringify(properties));\r\n        });\r\n    }\r\n    timeEvent(eventName) {\r\n        this.getClient().then((client) => {\r\n            client.timeEvent(eventName);\r\n        });\r\n    }\r\n    newEventSession(id) {\r\n        this.getClient().then((client) => {\r\n            if (id !== undefined) {\r\n                client.newEventSession();\r\n            }\r\n            else {\r\n                client.newEventSession(id);\r\n            }\r\n        });\r\n    }\r\n    getRevelRoot() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const client = yield this.getClient();\r\n            return client.getRevelRoot();\r\n        });\r\n    }\r\n    // ---\r\n    // PRIVATE METHODS.\r\n    // ---\r\n    // I return a Promise that resolves with a Tracker API (which may be the 3rd-party\r\n    // library or a mock API representation).\r\n    getClient() {\r\n        if (this.clientPromise) {\r\n            return (this.clientPromise);\r\n        }\r\n        if (window.Client) {\r\n            return (this.clientPromise = Promise.resolve(window.Client));\r\n        }\r\n        // A \"complete\" status indicates that the \"load\" event has been fired on the\r\n        // window; and, that all sub-resources such as Scripts, Images, and Frames have\r\n        // been loaded.\r\n        if (window.document.readyState === \"complete\") {\r\n            // If this event has fired AND the 3rd-party script isn't available (see IF-\r\n            // condition BEFORE this one), it means that the 3rd-party script either\r\n            // failed on the network or was BLOCKED by an ad-blocker. As such, we have to\r\n            // fall-back to using a mock API.\r\n            return (this.clientPromise = Promise.resolve(new NoopClient()));\r\n        }\r\n        // ASSERT: If we made it this far, the document has not completed loading (but it\r\n        // may be in an \"interactive\" state which is when I believe that the Angular app\r\n        // gets bootstrapped). As such, we need bind to the LOAD event to wait for our\r\n        // third-party scripts to load (or fail to load, or be blocked).\r\n        this.clientPromise = new Promise((resolve) => {\r\n            window.addEventListener(\"load\", function handleWindowLoad() {\r\n                // At this point, the 3rd-party library is either available or\r\n                // it's not - there's no further loading to do. If it's not\r\n                // present on the global scope, we're going to fall-back to using\r\n                // a mock API.\r\n                resolve(window.Client || new NoopClient());\r\n            });\r\n        });\r\n        return (this.clientPromise);\r\n    }\r\n}\nPlayerClientService.ɵfac = function PlayerClientService_Factory(t) { return new (t || PlayerClientService)(); };\r\nPlayerClientService.ɵprov = ɵɵdefineInjectable({ factory: function PlayerClientService_Factory() { return new PlayerClientService(); }, token: PlayerClientService, providedIn: \"root\" });\r\nPlayerClientService.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PlayerClientService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\r\n// ----------------------------------------------------------------------------------- //\r\n// ----------------------------------------------------------------------------------- //\r\n// I provide a mock API for the 3rd-party script. This just allows the consuming code to\r\n// act as though the library is available even if it failed to load (example, it was\r\n// blocked by an ad-blocker).\r\nclass NoopClient {\r\n    constructor() {\r\n        console.warn(\"Client API not available, falling back to mock API.\");\r\n    }\r\n    callback(...args) {\r\n        // NOOP implement, nothing to do....\r\n    }\r\n    getDeviceTime(date) {\r\n        return Promise.resolve(null);\r\n    }\r\n    getDeviceTimeZoneName() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return Promise.resolve(null);\r\n        });\r\n    }\r\n    getDeviceTimeZoneID() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return Promise.resolve(null);\r\n        });\r\n    }\r\n    getDeviceTimeZoneOffset() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return Promise.resolve(null);\r\n        });\r\n    }\r\n    getLanguageCode() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return Promise.resolve(null);\r\n        });\r\n    }\r\n    getDeviceKey() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return Promise.resolve(null);\r\n        });\r\n    }\r\n    sendCommand(name, arg) {\r\n        // NOOP implement, nothing to do....\r\n    }\r\n    track(eventName, properties) {\r\n        // NOOP implement, nothing to do....\r\n    }\r\n    timeEvent(eventName) {\r\n        // NOOP implement, nothing to do....\r\n    }\r\n    newEventSession(id) {\r\n        // NOOP implement, nothing to do....\r\n    }\r\n    getRevelRoot() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return Promise.resolve(null);\r\n        });\r\n    }\r\n}\n\nclass PlayerClientModule {\r\n}\nPlayerClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PlayerClientModule });\nPlayerClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PlayerClientModule_Factory(t) { return new (t || PlayerClientModule)(); }, imports: [[]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PlayerClientModule, [{\n        type: NgModule,\n        args: [{\n                imports: []\n            }]\n    }], null, null); })();\n\n/*\r\n * Public API Surface of player-client\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { PlayerClientModule, PlayerClientService };\n\n//# sourceMappingURL=reveldigital-player-client.js.map","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}