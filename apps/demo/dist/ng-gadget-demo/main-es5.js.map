{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/revel-digital.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","client","title","getDeviceTime","res","console","log","Date","setInterval","time","decide","hours","getHours","msg","selector","templateUrl","styleUrls","AppModule","provide","useValue","declarations","providers","bootstrap","RevelDigitalService","clientPromise","date","getClient","undefined","window","Client","document","readyState","NoopClient","addEventListener","handleWindowLoad","providedIn","warn","user","eventType","eventData","environment","production","bootstrapModule","err","error"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,eAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,eAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,cAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,WAAC,CAACE,IAAF,GAAS,kBAAT;AACA,gBAAMF,CAAN;AACA,SAJM,CAAP;AAKA;;AACDL,8BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,eAAO,EAAP;AAAY,OAAzD;;AACAR,8BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,YAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,8BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,UAAMC,MAAM,GAAW,EAAvB;;UAMaC,gB;;;;;cAAAA;;;;2BAAAA,gB;AAAgB,S;AAAA,kBAHlB,CAAC,6DAAaC,OAAb,CAAqBF,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;4HAAhBC,gB,EAAgB;AAAA;AAAA,oBAFjB,4DAEiB;AAAA,S;AAFL,O;;;;;wEAEXA,gB,EAAgB;gBAJ5B,sDAI4B;iBAJnB;AACRE,mBAAO,EAAE,CAAC,6DAAaD,OAAb,CAAqBF,MAArB,CAAD,CADD;AAERF,mBAAO,EAAE,CAAC,4DAAD;AAFD,W;AAImB,U;;;;;;;;;;;;;;;;;;ACT7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaM,Y;AASX,8BAAYC,MAAZ,EAAyC;AAAA;;AAAA;;AANzC,eAAAC,KAAA,GAAQ,cAAR;AAQED,gBAAM,CAACE,aAAP,GAAuBf,IAAvB,CAA4B,UAACgB,GAAD,EAAS;AACnCC,mBAAO,CAACC,GAAR,CAAY,qBAAqBF,GAAjC;AACD,WAFD;AAIAH,gBAAM,CAACE,aAAP,CAAqB,IAAII,IAAJ,EAArB,EAAiCnB,IAAjC,CAAsC,UAACgB,GAAD,EAAS;AAC7CC,mBAAO,CAACC,GAAR,CAAY,qBAAqBF,GAAjC;AACD,WAFD,EANuC,CAWvC;AACA;AACA;AACA;;AAEAI,qBAAW,CAAC,YAAM;AAChB,iBAAI,CAACC,IAAL,GAAY,IAAIF,IAAJ,EAAZ;AACD,WAFU,EAER,IAFQ,CAAX;AAIA,eAAKG,MAAL;AACD;;;;mCAEQ;AACP,iBAAKC,KAAL,GAAa,IAAIJ,IAAJ,GAAWK,QAAX,EAAb;;AAEA,gBAAI,KAAKD,KAAL,GAAa,EAAjB,EAAqB;AACnB,mBAAKE,GAAL,GAAW,cAAX;AACD,aAFD,MAEO,IAAI,KAAKF,KAAL,GAAa,EAAjB,EAAqB;AAC1B,mBAAKE,GAAL,GAAW,gBAAX;AACD,aAFM,MAEA,IAAI,KAAKF,KAAL,GAAa,EAAjB,EAAqB;AAC1B,mBAAKE,GAAL,GAAW,cAAX;AACD,aAFM,MAEA,IAAI,KAAKF,KAAL,GAAa,EAAjB,EAAqB;AAC1B,mBAAKE,GAAL,GAAW,YAAX;AACD;AACF;;;;;;;yBA5CUb,Y,EAAY,2I;AAAA,O;;;cAAZA,Y;AAAY,iC;AAAA,iB;AAAA,e;AAAA,oG;AAAA;AAAA;ACVzB;;AACE;;AAAoB;;;;AAAwB;;AAC5C;;AAAyB;;AAAO;;AAClC;;AAEA;;AACE;;AACE;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACF;;AACF;;;;AAjBsB;;AAAA;;AACK;;AAAA;;;;;;;;;wEDQdA,Y,EAAY;gBALxB,uDAKwB;iBALd;AACTc,oBAAQ,EAAE,UADD;AAETC,uBAAW,EAAE,sBAFJ;AAGTC,qBAAS,EAAE,CAAC,sBAAD;AAHF,W;AAKc,U;;;;;;;;;;;;;;;;;;;;;;AEVzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAUA,iFAAmB,iEAAnB;AACA,iFAAmB,iEAAnB;;UAgBaC,S;;;;;cAAAA,S;AAAS,oBAFR,2DAEQ;;;;2BAATA,S;AAAS,S;AAAA,mBANT,CACT;AAAEC,iBAAO,EAAE,uDAAX;AAAsBC,kBAAQ,EAAE;AAAhC,SADS,EAET;AAAED,iBAAO,EAAE,6DAAX;AAA0BC,kBAAQ,EAAE;AAApC,SAFS,C;AAGV,kBAPQ,CACP,uEADO,EAEP,oEAFO,CAOR;;;;4HAGUF,S,EAAS;AAAA,yBAZlB,2DAYkB;AAZN,oBAGZ,uEAHY,EAIZ,oEAJY;AAYM,S;AARF,O;;;;;wEAQPA,S,EAAS;gBAdrB,sDAcqB;iBAdZ;AACRG,wBAAY,EAAE,CACZ,2DADY,CADN;AAIRrB,mBAAO,EAAE,CACP,uEADO,EAEP,oEAFO,CAJD;AAQRsB,qBAAS,EAAE,CACT;AAAEH,qBAAO,EAAE,uDAAX;AAAsBC,sBAAQ,EAAE;AAAhC,aADS,EAET;AAAED,qBAAO,EAAE,6DAAX;AAA0BC,sBAAQ,EAAE;AAApC,aAFS,CARH;AAYRG,qBAAS,EAAE,CAAC,2DAAD;AAZH,W;AAcY,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCSTC,mB;AAIX,uCAAc;AAAA;;AACZ,eAAKC,aAAL,GAAqB,IAArB;AACD;;;;wCAE0BC,I,EAAW;;;;;;;;AAErB,6BAAM,KAAKC,SAAL,EAAN;;;AAATzB,4B;;4BAEFwB,IAAI,KAAKE,S;;;;;uDACJ1B,MAAM,CAACE,aAAP,CAAqBsB,IAArB,C;;;uDAEFxB,MAAM,CAACE,aAAP,E;;;;;;;;;AACR,W,CAED;AACA;AACA;AAEA;AACA;;;;sCACiB;AAEf,gBAAI,KAAKqB,aAAT,EAAwB;AAEtB,qBAAQ,KAAKA,aAAb;AACD;;AAED,gBAAII,MAAM,CAACC,MAAX,EAAmB;AAEjB,qBAAQ,KAAKL,aAAL,GAAqBtC,OAAO,CAACC,OAAR,CAAgByC,MAAM,CAACC,MAAvB,CAA7B;AACD,aAVc,CAYf;AACA;AACA;;;AACA,gBAAID,MAAM,CAACE,QAAP,CAAgBC,UAAhB,KAA+B,UAAnC,EAA+C;AAE7C;AACA;AACA;AACA;AACA,qBAAQ,KAAKP,aAAL,GAAqBtC,OAAO,CAACC,OAAR,CAAgB,IAAI6C,UAAJ,EAAhB,CAA7B;AACD,aAtBc,CAwBf;AACA;AACA;AACA;;;AACA,iBAAKR,aAAL,GAAqB,IAAItC,OAAJ,CACnB,UAACC,OAAD,EAAa;AAEXyC,oBAAM,CAACK,gBAAP,CACE,MADF,EAEE,SAASC,gBAAT,GAA4B;AAE1B;AACA;AACA;AACA;AACA/C,uBAAO,CAACyC,MAAM,CAACC,MAAP,IAAiB,IAAIG,UAAJ,EAAlB,CAAP;AAED,eAVH;AAaD,aAhBkB,CAArB;AAmBA,mBAAQ,KAAKR,aAAb;AACD;;;;;;;yBAxEUD,mB;AAAmB,O;;;eAAnBA,mB;AAAmB,iBAAnBA,mBAAmB,K;AAAA,oBAFlB;;;;;wEAEDA,mB,EAAmB;gBAH/B,wDAG+B;iBAHpB;AACVY,sBAAU,EAAE;AADF,W;AAGoB,U;;;YA8EhC;AACA;AAEA;AACA;AACA;;;UACMH,U;AAEJ,8BAAc;AAAA;;AAEZ3B,iBAAO,CAAC+B,IAAR,CAAa,qDAAb;AACD;;;;wCAEoBX,I,EAAW;AAE9B,mBAAOvC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;;mCAEekD,I,EAAkB,CAEhC;AACD;;;gCAEYC,S,EAAmBC,S,EAAqB,CAEnD;AACD;;;;;;;;;;;;;;;;;;;;;AC5IH;AAAA;;;AAAA;AAAA;AAAA,S,CAAA;AACA;AACA;;;AAEO,UAAMC,WAAW,GAAG;AACzBC,kBAAU,EAAE;AADa,OAApB;AAIP;;;;;;;AAOA;;;;;;;;;;;;;;;;;ACfA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,UAAI,sEAAYA,UAAhB,EAA4B;AAC1B;AACD;;AAED,kFAAyBC,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,eAAItC,OAAO,CAACuC,KAAR,CAAcD,GAAd,CAAJ;AAAA,OADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { RevelDigitalService } from './revel-digital.service';\n\ndeclare var gadgets: any;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  prefs;\n  title = 'clock-greets';\n  time;\n  hours;\n  msg;\n  link;\n\n  constructor(client: RevelDigitalService) {\n\n    client.getDeviceTime().then((res) => {\n      console.log('device time #1: ' + res);\n    });\n\n    client.getDeviceTime(new Date()).then((res) => {\n      console.log('device time #2: ' + res);\n    });\n\n\n    // if (typeof gadgets !== undefined) {\n    //   this.prefs = new gadgets.Prefs();\n    //   console.log('rdKey pref: ' + this.prefs.getString('rdKey'));\n    // }\n\n    setInterval(() => {\n      this.time = new Date();\n    }, 1000);\n\n    this.decide();\n  }\n\n  decide() {\n    this.hours = new Date().getHours();\n\n    if (this.hours < 10) {\n      this.msg = 'Good Morning';\n    } else if (this.hours < 16) {\n      this.msg = 'Good Afternoon';\n    } else if (this.hours < 19) {\n      this.msg = 'Good Evening';\n    } else if (this.hours < 24) {\n      this.msg = 'Good Night';\n    }\n  }\n}","<div class=\"context\">\n  <p class=\"txt-time\">{{time | date:'medium'}}</p>\n  <p class=\"txt-greetings\">{{msg}}</p>\n</div>\n\n<div class=\"area\">\n  <ul class=\"circles\">\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n  </ul>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { LOCALE_ID } from '@angular/core';\nimport { APP_BASE_HREF, registerLocaleData } from '@angular/common';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport localeFr from '@angular/common/locales/fr';\nimport localeRu from '@angular/common/locales/ru';\nregisterLocaleData(localeFr);\nregisterLocaleData(localeRu);\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [\n    { provide: LOCALE_ID, useValue: \"fr\" },\n    { provide: APP_BASE_HREF, useValue: '/gadgets/ifr' }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\n\n// So that TypeScript doesn't complain, we're going to augment the GLOBAL / WINDOW \n// name-space definition to include the Tracker API. This also provides us with a place\n// to actually DOCUMENT the API so that our developers aren't guessing about what's\n// available on the library.\ndeclare global {\n  var Client: Client;\n}\n\n// The following interfaces both help with the Tracker definition as well as with the\n// type annotations that we're going to use in our proxy API.\nexport interface Client {\n  getDeviceTime(date?: Date): Promise<string>;\n  //identify( user: UserIdentity ) : void;\n  //track( eventType: string, eventData?: EventData ) : void;\n}\n\n\nexport interface UserIdentity {\n  id: number;\n  name: string;\n  fields: {\n    [key: string]: any;\n  }\n}\n\nexport interface EventData {\n  [key: string]: any;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RevelDigitalService {\n\n  private clientPromise: Promise<Client> | null;\n\n  constructor() {\n    this.clientPromise = null;\n  }\n\n  public async getDeviceTime(date?: Date): Promise<string> {\n\n    const client = await this.getClient();\n\n    if (date !== undefined) {\n      return client.getDeviceTime(date);\n    }\n    return client.getDeviceTime();\n  }\n  \n  // ---\n  // PRIVATE METHODS.\n  // ---\n\n  // I return a Promise that resolves with a Tracker API (which may be the 3rd-party\n  // library or a mock API representation).\n  private getClient(): Promise<Client> {\n\n    if (this.clientPromise) {\n\n      return (this.clientPromise);\n    }\n\n    if (window.Client) {\n\n      return (this.clientPromise = Promise.resolve(window.Client));\n    }\n\n    // A \"complete\" status indicates that the \"load\" event has been fired on the\n    // window; and, that all sub-resources such as Scripts, Images, and Frames have\n    // been loaded.\n    if (window.document.readyState === \"complete\") {\n\n      // If this event has fired AND the 3rd-party script isn't available (see IF-\n      // condition BEFORE this one), it means that the 3rd-party script either\n      // failed on the network or was BLOCKED by an ad-blocker. As such, we have to\n      // fall-back to using a mock API.\n      return (this.clientPromise = Promise.resolve(new NoopClient()));\n    }\n\n    // ASSERT: If we made it this far, the document has not completed loading (but it\n    // may be in an \"interactive\" state which is when I believe that the Angular app\n    // gets bootstrapped). As such, we need bind to the LOAD event to wait for our\n    // third-party scripts to load (or fail to load, or be blocked).\n    this.clientPromise = new Promise<Client>(\n      (resolve) => {\n\n        window.addEventListener(\n          \"load\",\n          function handleWindowLoad() {\n\n            // At this point, the 3rd-party library is either available or\n            // it's not - there's no further loading to do. If it's not\n            // present on the global scope, we're going to fall-back to using\n            // a mock API.\n            resolve(window.Client || new NoopClient());\n\n          }\n        );\n\n      }\n    );\n\n    return (this.clientPromise);\n  }\n\n}\n\n\n\n// ----------------------------------------------------------------------------------- //\n// ----------------------------------------------------------------------------------- //\n\n// I provide a mock API for the 3rd-party script. This just allows the consuming code to\n// act as though the library is available even if it failed to load (example, it was\n// blocked by an ad-blocker).\nclass NoopClient implements Client {\n\n  constructor() {\n\n    console.warn(\"Client API not available, falling back to mock API.\");\n  }\n\n  public getDeviceTime(date?: Date): Promise<string> {\n\n    return Promise.resolve(null);\n  }\n\n  public identify(user: UserIdentity): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public track(eventType: string, eventData?: EventData): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}