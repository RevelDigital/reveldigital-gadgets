{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/revel-digital.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAyC;AACc;;;AAEvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;AAUnC,MAAM,YAAY;IASvB,YAAY,MAA2B;QANvC,UAAK,GAAG,cAAc,CAAC;QAQrB,MAAM,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,aAAa,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;YAC5C,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,GAAG,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAGH,sCAAsC;QACtC,sCAAsC;QACtC,iEAAiE;QACjE,IAAI;QAEJ,WAAW,CAAC,GAAG,EAAE;YACf,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACzB,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAC;QAEnC,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,EAAE;YACnB,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC;SAC3B;aAAM,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,EAAE;YAC1B,IAAI,CAAC,GAAG,GAAG,gBAAgB,CAAC;SAC7B;aAAM,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,EAAE;YAC1B,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC;SAC3B;aAAM,IAAI,IAAI,CAAC,KAAK,GAAG,EAAE,EAAE;YAC1B,IAAI,CAAC,GAAG,GAAG,YAAY,CAAC;SACzB;IACH,CAAC;;wEA5CU,YAAY;4FAAZ,YAAY;QCVzB,yEACE;QAAA,uEAAoB;QAAA,uDAAwB;;QAAA,4DAAI;QAChD,uEAAyB;QAAA,uDAAO;QAAA,4DAAI;QACtC,4DAAM;QAEN,yEACE;QAAA,wEACE;QAAA,gEAAS;QACT,gEAAS;QACT,iEAAS;QACT,iEAAS;QACT,iEAAS;QACT,iEAAS;QACT,iEAAS;QACT,iEAAS;QACT,iEAAS;QACT,iEAAS;QACX,4DAAK;QACP,4DAAM;;QAjBgB,0DAAwB;QAAxB,oJAAwB;QACnB,0DAAO;QAAP,wEAAO;;6FDQrB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACC;AAC0B;AAEZ;AACT;AAEG;AACA;;AAClD,0EAAkB,CAAC,iEAAQ,CAAC,CAAC;AAC7B,0EAAkB,CAAC,iEAAQ,CAAC,CAAC;AAgBtB,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBANT;QACT,EAAE,OAAO,EAAE,uDAAS,EAAE,QAAQ,EAAE,IAAI,EAAE;QACtC,EAAE,OAAO,EAAE,6DAAa,EAAE,QAAQ,EAAE,cAAc,EAAE;KACrD,YAPQ;YACP,uEAAa;YACb,oEAAgB;SACjB;mIAOU,SAAS,mBAZlB,2DAAY,aAGZ,uEAAa;QACb,oEAAgB;6FAQP,SAAS;cAdrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;iBACb;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;iBACjB;gBACD,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,uDAAS,EAAE,QAAQ,EAAE,IAAI,EAAE;oBACtC,EAAE,OAAO,EAAE,6DAAa,EAAE,QAAQ,EAAE,cAAc,EAAE;iBACrD;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;;;;;;AC1B0C;;AAoCpC,MAAM,mBAAmB;IAI9B;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAEY,aAAa,CAAC,IAAW;;YAEpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YAEtC,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,OAAO,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;aACnC;YACD,OAAO,MAAM,CAAC,aAAa,EAAE,CAAC;QAChC,CAAC;KAAA;IAED,MAAM;IACN,mBAAmB;IACnB,MAAM;IAEN,kFAAkF;IAClF,yCAAyC;IACjC,SAAS;QAEf,IAAI,IAAI,CAAC,aAAa,EAAE;YAEtB,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC7B;QAED,IAAI,MAAM,CAAC,MAAM,EAAE;YAEjB,OAAO,CAAC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;SAC9D;QAED,4EAA4E;QAC5E,+EAA+E;QAC/E,eAAe;QACf,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,KAAK,UAAU,EAAE;YAE7C,4EAA4E;YAC5E,wEAAwE;YACxE,6EAA6E;YAC7E,iCAAiC;YACjC,OAAO,CAAC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC,CAAC;SACjE;QAED,iFAAiF;QACjF,gFAAgF;QAChF,8EAA8E;QAC9E,gEAAgE;QAChE,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,CAC9B,CAAC,OAAO,EAAE,EAAE;YAEV,MAAM,CAAC,gBAAgB,CACrB,MAAM,EACN,SAAS,gBAAgB;gBAEvB,8DAA8D;gBAC9D,2DAA2D;gBAC3D,iEAAiE;gBACjE,cAAc;gBACd,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,UAAU,EAAE,CAAC,CAAC;YAE7C,CAAC,CACF,CAAC;QAEJ,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9B,CAAC;;sFAxEU,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB,mBAFlB,MAAM;6FAEP,mBAAmB;cAH/B,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;AA+ED,yFAAyF;AACzF,yFAAyF;AAEzF,wFAAwF;AACxF,oFAAoF;AACpF,6BAA6B;AAC7B,MAAM,UAAU;IAEd;QAEE,OAAO,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;IACtE,CAAC;IAEM,aAAa,CAAC,IAAW;QAE9B,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEM,QAAQ,CAAC,IAAkB;QAEhC,oCAAoC;IACtC,CAAC;IAEM,KAAK,CAAC,SAAiB,EAAE,SAAqB;QAEnD,oCAAoC;IACtC,CAAC;CAEF;;;;;;;;;;;;;AC9ID;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { RevelDigitalService } from './revel-digital.service';\n\ndeclare var gadgets: any;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  prefs;\n  title = 'clock-greets';\n  time;\n  hours;\n  msg;\n  link;\n\n  constructor(client: RevelDigitalService) {\n\n    client.getDeviceTime().then((res) => {\n      console.log('device time #1: ' + res);\n    });\n\n    client.getDeviceTime(new Date()).then((res) => {\n      console.log('device time #2: ' + res);\n    });\n\n\n    // if (typeof gadgets !== undefined) {\n    //   this.prefs = new gadgets.Prefs();\n    //   console.log('rdKey pref: ' + this.prefs.getString('rdKey'));\n    // }\n\n    setInterval(() => {\n      this.time = new Date();\n    }, 1000);\n\n    this.decide();\n  }\n\n  decide() {\n    this.hours = new Date().getHours();\n\n    if (this.hours < 10) {\n      this.msg = 'Good Morning';\n    } else if (this.hours < 16) {\n      this.msg = 'Good Afternoon';\n    } else if (this.hours < 19) {\n      this.msg = 'Good Evening';\n    } else if (this.hours < 24) {\n      this.msg = 'Good Night';\n    }\n  }\n}","<div class=\"context\">\n  <p class=\"txt-time\">{{time | date:'medium'}}</p>\n  <p class=\"txt-greetings\">{{msg}}</p>\n</div>\n\n<div class=\"area\">\n  <ul class=\"circles\">\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n    <li></li>\n  </ul>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { LOCALE_ID } from '@angular/core';\nimport { APP_BASE_HREF, registerLocaleData } from '@angular/common';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport localeFr from '@angular/common/locales/fr';\nimport localeRu from '@angular/common/locales/ru';\nregisterLocaleData(localeFr);\nregisterLocaleData(localeRu);\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  providers: [\n    { provide: LOCALE_ID, useValue: \"fr\" },\n    { provide: APP_BASE_HREF, useValue: '/gadgets/ifr' }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\n\n// So that TypeScript doesn't complain, we're going to augment the GLOBAL / WINDOW \n// name-space definition to include the Tracker API. This also provides us with a place\n// to actually DOCUMENT the API so that our developers aren't guessing about what's\n// available on the library.\ndeclare global {\n  var Client: Client;\n}\n\n// The following interfaces both help with the Tracker definition as well as with the\n// type annotations that we're going to use in our proxy API.\nexport interface Client {\n  getDeviceTime(date?: Date): Promise<string>;\n  //identify( user: UserIdentity ) : void;\n  //track( eventType: string, eventData?: EventData ) : void;\n}\n\n\nexport interface UserIdentity {\n  id: number;\n  name: string;\n  fields: {\n    [key: string]: any;\n  }\n}\n\nexport interface EventData {\n  [key: string]: any;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RevelDigitalService {\n\n  private clientPromise: Promise<Client> | null;\n\n  constructor() {\n    this.clientPromise = null;\n  }\n\n  public async getDeviceTime(date?: Date): Promise<string> {\n\n    const client = await this.getClient();\n\n    if (date !== undefined) {\n      return client.getDeviceTime(date);\n    }\n    return client.getDeviceTime();\n  }\n  \n  // ---\n  // PRIVATE METHODS.\n  // ---\n\n  // I return a Promise that resolves with a Tracker API (which may be the 3rd-party\n  // library or a mock API representation).\n  private getClient(): Promise<Client> {\n\n    if (this.clientPromise) {\n\n      return (this.clientPromise);\n    }\n\n    if (window.Client) {\n\n      return (this.clientPromise = Promise.resolve(window.Client));\n    }\n\n    // A \"complete\" status indicates that the \"load\" event has been fired on the\n    // window; and, that all sub-resources such as Scripts, Images, and Frames have\n    // been loaded.\n    if (window.document.readyState === \"complete\") {\n\n      // If this event has fired AND the 3rd-party script isn't available (see IF-\n      // condition BEFORE this one), it means that the 3rd-party script either\n      // failed on the network or was BLOCKED by an ad-blocker. As such, we have to\n      // fall-back to using a mock API.\n      return (this.clientPromise = Promise.resolve(new NoopClient()));\n    }\n\n    // ASSERT: If we made it this far, the document has not completed loading (but it\n    // may be in an \"interactive\" state which is when I believe that the Angular app\n    // gets bootstrapped). As such, we need bind to the LOAD event to wait for our\n    // third-party scripts to load (or fail to load, or be blocked).\n    this.clientPromise = new Promise<Client>(\n      (resolve) => {\n\n        window.addEventListener(\n          \"load\",\n          function handleWindowLoad() {\n\n            // At this point, the 3rd-party library is either available or\n            // it's not - there's no further loading to do. If it's not\n            // present on the global scope, we're going to fall-back to using\n            // a mock API.\n            resolve(window.Client || new NoopClient());\n\n          }\n        );\n\n      }\n    );\n\n    return (this.clientPromise);\n  }\n\n}\n\n\n\n// ----------------------------------------------------------------------------------- //\n// ----------------------------------------------------------------------------------- //\n\n// I provide a mock API for the 3rd-party script. This just allows the consuming code to\n// act as though the library is available even if it failed to load (example, it was\n// blocked by an ad-blocker).\nclass NoopClient implements Client {\n\n  constructor() {\n\n    console.warn(\"Client API not available, falling back to mock API.\");\n  }\n\n  public getDeviceTime(date?: Date): Promise<string> {\n\n    return Promise.resolve(null);\n  }\n\n  public identify(user: UserIdentity): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n  public track(eventType: string, eventData?: EventData): void {\n\n    // NOOP implement, nothing to do....\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}