<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="Korona Menu" description="A menu gadget for displaying product information from Korona POS software" author="" background="transparent">
        <UserPref name="myAPIPref" display_name="API Token*" datatype="string" default_value="" required="true" />
        <UserPref name="accID" display_name="Account ID*" datatype="string" default_value="" required="true" />
        <UserPref name="minQty" display_name="Minimum Quantity for Removal*" datatype="string" default_value="2" required="true" />
        <UserPref name="orgUnitID" display_name="Organizational Unit ID" datatype="string" default_value="" required="false" />
        <UserPref name="itemID" display_name="Product ID (for displaying a single item only)" datatype="string" default_value="" required="false" />
        <UserPref name="groupID" display_name="Group ID (for displaying a single group only)" datatype="enum" default_value="">
            <EnumValue value="" display_value="None" />
            <EnumValue value="Pre-Rolls" display_value="Pre-Rolls" />
            <EnumValue value="Flower" display_value="Flower" />
            <EnumValue value="Beverages" display_value="Beverages" />
            <EnumValue value="Vape" display_value="Vape" />
            <EnumValue value="Edibles" display_value="Edibles" />
            <EnumValue value="Concentrates" display_value="Concentrates" />
            <EnumValue value="Infused PreRolls" display_value="Infused PreRolls" />
        </UserPref>

        <UserPref name="tableSpacingTop" display_name="Top-Bottom Table Spacing" datatype="string" default_value="8" required="true" />
        <UserPref name="tableSpacingSide" display_name="Left-Right Table Spacing" datatype="string" default_value="30" required="true" />
        <UserPref name="tableFontSize" display_name="Table Text Size" datatype="string" default_value="1.17" required="true" />
        <UserPref name="stockFontSize" display_name="Special Text Size" datatype="string" default_value="1.17" required="true" />
        <UserPref name="updateInterval" display_name="Update Interval (in minutes)" datatype="string" default_value="5" required="true" />
        <UserPref name="myBackColorPref" display_name="Background Color" datatype="color" default_value="#B6D0E2" />
        <UserPref name="myHeadColorPref" display_name="Header Color" datatype="color" default_value="#1ABC9C" />
        <UserPref name="myHeadTextColorPref" display_name="Header Text Color" datatype="color" default_value="#FFFFFF" />
        <UserPref name="myBackTextColorPref" display_name="Body Text Color" datatype="color" default_value="#000000" />
        <UserPref name="myBorderColorPref" display_name="Item List Border Color" datatype="color" default_value="#000000" />
        <UserPref name="myTitlePref" display_name="Menu Title" datatype="string" default_value="Customizable Korona Menu via API!" required="false" />

        <UserPref name="currencyTick" display_name="Currency Symbol" datatype="enum" default_value="USD">
            <EnumValue value="USD" display_value="US Dollar" />
            <EnumValue value="EUR" display_value="Euro" />
            <EnumValue value="PND" display_value="British Pound" />
            <EnumValue value="THB" display_value="Thai Baht" />
        </UserPref>
        <UserPref name="myBoolHeadPref" display_name="Display Header" datatype="bool" default_value="true" />
        <UserPref name="myBoolQTYPref" display_name="Display Quantity" datatype="bool" default_value="false" />
        <UserPref name="myBoolBrandPref" display_name="Display Brand Name" datatype="bool" default_value="true" />

        <UserPref name="ForeColor" datatype="hidden" />
        <UserPref name="BackColor" datatype="hidden" />
        <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
        <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
        <UserPref name="rdKey" display_name="Device Registration Key" default_value="*|DEVICE.REGISTRATIONKEY|*" datatype="hidden" />
    </ModulePrefs>
    <Content type="html">
        <![CDATA[<style type="text/css">

    body *
    {
        line-height: 1.2em; 
        letter-spacing: 0; 
        word-spacing: normal;
    }

    body {
        background-color: __UP_myBackColorPref__;
    }

    .header {
        padding: 30px;
        text-align: center;
        background: __UP_myHeadColorPref__;
        color: __UP_myHeadTextColorPref__;
        font-size: 20px;
    }

    #priceStock {
        font-size: 25px;
        text-align: center;
        color: __UP_myBackTextColorPref__;
        font-size: __UP_stockFontSize__em;
    }

    #itemList {
        font-size: 25px;
        text-align: center;
        color: __UP_myBackTextColorPref__;
    }

    .centerTable {
        margin-left: auto;
        margin-right: auto;
        padding-bottom: 1rem;
        font-size: __UP_tableFontSize__em;
    }

    th,
    td {
        padding-bottom: __UP_tableSpacingTop__px;
        padding-top: __UP_tableSpacingTop__px;
        padding-left: __UP_tableSpacingSide__px;
        padding-right: __UP_tableSpacingSide__px;
        border-bottom: 1pt solid __UP_myBorderColorPref__;
    }

    .my-style
    {
        __UP_myStylePref__;
    }

</style>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<body>
    <div class="header" id="headerID">
        <h1>__UP_myTitlePref__</h1>
    </div>
    <div id="itemList">
        <div>
            <table id="itemListList" class="centerTable">
            </table>
        </div>
    </div>
</body>

<script type="text/javascript">
    var prefs = new gadgets.Prefs();

    let myAPIToken = "__UP_myAPIPref__";
    let accID = "__UP_accID__";
    let orgUnitID = "__UP_orgUnitID__";
    let myUpdateInterval = (__UP_updateInterval__ * 60000);
    let myItemID = "__UP_itemID__";
    let myGroupID = "__UP_groupID__";
    let myMinQty = __UP_minQty__;
    let endPoint = "https://167.koronacloud.com/web/api/v3";
    
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    if ("__UP_currencyTick__" == "USD") {
        var formatter = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
        });
    }
    else if ("__UP_currencyTick__" == "EUR") {
        var formatter = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'EUR',
        });
    }
    else if ("__UP_currencyTick__" == "PND") {
        var formatter = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'GBP',
        });
    }
    else if ("__UP_currencyTick__" == "THB") {
        var formatter = new Intl.NumberFormat('th-TH', {
            style: 'currency',
            currency: 'THB',
        });
    }
    
    const options = {
        headers: { authorization: 'Basic ' + myAPIToken }
    };

    if (__UP_myBoolHeadPref__ === false) {
        const element = document.getElementById('headerID');
        element.remove();
    }

    if (myGroupID != "") {
        axios.get(endPoint + '/accounts/' + accID + '/products', options)
                .then((response) => {
                    for (let i = 0; i < response.data.results.length; i++) {
                        if (response.data.results[i].name != "" && response.data.results[i].commodityGroup.name == myGroupID) {
                            (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].name + "</td><td>"
                                + formatter.format(response.data.results[i].lastPurchasePrice) + "</td></tr>");}}})
                .catch(err => console.error(err));
    }
    else {
        if (__UP_myBoolQTYPref__) {
            if (myItemID !== "") {
                axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                    .then((response) => {
                        for (let i = 0; i < response.data.results.length; i++) {
                            if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty && response.data.results[i].product.id == myItemID) {
                                (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                    + formatter.format(response.data.results[i].averagePurchasePrice) + "</td><td>"
                                    + response.data.results[i].amount.actual + "</td></tr>");}}})
                    .catch(err => console.error(err));
            }
            else {
                axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                    .then((response) => {
                        for (let i = 0; i < response.data.results.length; i++) {
                            if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty) {
                                (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                    + formatter.format(response.data.results[i].averagePurchasePrice) + "</td><td>"
                                    + response.data.results[i].amount.actual + "</td></tr>");}}})
                    .catch(err => console.error(err));
            }
        }
        else {
            if (myItemID !== "") {
                axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                    .then((response) => {
                        for (let i = 0; i < response.data.results.length; i++) {
                            if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty && response.data.results[i].product.id == myItemID) {
                                (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                    + formatter.format(response.data.results[i].averagePurchasePrice) + "</td></tr>");}}})
                    .catch(err => console.error(err));
            }
            else {
                axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                    .then((response) => {
                        for (let i = 0; i < response.data.results.length; i++) {
                            if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty) {
                                (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                    + formatter.format(response.data.results[i].averagePurchasePrice) + "</td></tr>");}}})
                    .catch(err => console.error(err));
            }
        }
    }
        
    function getInv() {
        document.getElementById("itemListList").innerHTML = "";
        if (myGroupID != "") {
            axios.get(endPoint + '/accounts/' + accID + '/products', options)
                    .then((response) => {
                        for (let i = 0; i < response.data.results.length; i++) {
                            if (response.data.results[i].name != "" && response.data.results[i].commodityGroup.name == myGroupID) {
                                (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].name + "</td><td>"
                                    + formatter.format(response.data.results[i].lastPurchasePrice) + "</td></tr>");}}})
                    .catch(err => console.error(err));
        }
        else {
            if (__UP_myBoolQTYPref__) {
                if (myItemID !== "") {
                    axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                        .then((response) => {
                            for (let i = 0; i < response.data.results.length; i++) {
                                if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty && response.data.results[i].product.id == myItemID) {
                                    (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                        + formatter.format(response.data.results[i].averagePurchasePrice) + "</td><td>"
                                        + response.data.results[i].amount.actual + "</td></tr>");}}})
                        .catch(err => console.error(err));
                }
                else {
                    axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                        .then((response) => {
                            for (let i = 0; i < response.data.results.length; i++) {
                                if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty) {
                                    (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                        + formatter.format(response.data.results[i].averagePurchasePrice) + "</td><td>"
                                        + response.data.results[i].amount.actual + "</td></tr>");}}})
                        .catch(err => console.error(err));
                }
            }
            else {
                if (myItemID !== "") {
                    axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                        .then((response) => {
                            for (let i = 0; i < response.data.results.length; i++) {
                                if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty && response.data.results[i].product.id == myItemID) {
                                    (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                        + formatter.format(response.data.results[i].averagePurchasePrice) + "</td></tr>");}}})
                        .catch(err => console.error(err));
                }
                else {
                    axios.get(endPoint + '/accounts/' + accID + '/organizationalUnits/' + orgUnitID + "/productStocks", options)
                        .then((response) => {
                            for (let i = 0; i < response.data.results.length; i++) {
                                if (response.data.results[i].product.name != "" && response.data.results[i].amount.actual > myMinQty) {
                                    (document.getElementById("itemListList").innerHTML += "<tr><td>" + response.data.results[i].product.name + "</td><td>"
                                        + formatter.format(response.data.results[i].averagePurchasePrice) + "</td></tr>");}}})
                        .catch(err => console.error(err));
                }
            }
        }
    }

    async function brandBool() {
        if (__UP_myBoolBrandPref__ === false && accID != "") {
            var brandTable = document.getElementById("itemListList");
            if ((brandTable.rows.length) > 0) {
                console.log("Attempting to Remove Brand Name");
                for (var i = 0; i < brandTable.rows.length; i++) {
                    var firstCol = brandTable.rows[i].cells[0];
                    if (firstCol.innerHTML.includes(" - ")) {
                        arr = firstCol.innerHTML.split(" - ");
                        arr.shift();
                        firstCol.innerHTML = arr.join(" - ");
                    }
                    else {
                        console.log(firstCol.innerHTML + " does NOT have a noticeable brand name. Continuing");
                    }
                }
            }
            else {
                await sleep(800);
                console.log("Failed to remove brand. Trying again shortly");
                brandBool();
            }
        }
    }
    brandBool();

    if (myUpdateInterval > 10000) { 
        setInterval(function () {
            getInv();
            brandBool();
            console.log("Stock count updated. Will update again in: " + __UP_updateInterval__ + " minute(s).");
        }, myUpdateInterval);
    }

</script>]]></Content>
</Module>
