<?xml version="1.0" encoding="UTF-8" ?> 
<Module> 
<ModulePrefs title="Wayfinding Gadget" description="" author="Revel Digital" background="transparent">
  <UserPref name="imageUrl" display_name="URL for image" datatype="string" default_value="" required="true" />
  <UserPref name="dataUrl" display_name="URL for json with data grid" datatype="string" default_value="" required="true" />
  <UserPref name="storesUrl" display_name="URL for json with destinations" datatype="string" default_value="" required="true" />
  <UserPref name="cellSize" display_name="Cell size in pixels" datatype="string" default_value=""/>
     
  <!-- The following preferences should not be modified -->
  <UserPref name="ForeColor" datatype="hidden" />
  <UserPref name="BackColor" datatype="hidden" />
  <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
  <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
  <UserPref name="rdKey" display_name="Device Registration Key" default_value="*|DEVICE.REGISTRATIONKEY|*" datatype="hidden" />
</ModulePrefs>
<Content type="html">
<![CDATA[
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
<script src="https://reveldigital.github.io/reveldigital-gadgets/third-party/pathfinding-browser.min.js" type="text/javascript"></script>
<script src="https://reveldigital.github.io/reveldigital-gadgets/third-party/paper-core.min.js" type="text/javascript"></script>
<style type="text/css">
  body *
  {
    background: url(__UP_imageUrl__) no-repeat center center fixed; 
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
    line-height: 1.2em; 
    letter-spacing: 0; 
    word-spacing: normal;
    font-family: 'Roboto', sans-serif;
  }
  #btnContainer {
    position: absolute;
    height:100%;
    width: 10%;
    right: 0;
    top:0;
    overflow-y: hidden;
    z-index: 50;
  }
  button {
    width:95%;
    height: 50px;
  }
  #myCanvas {
    position: relative;
    left: 0;
    z-index: 10;
    width:100%;
    height: 100%;
  }
  .store-btn {
    margin: 3%;
    font-size: 1.2em;
    border: 2px solid;
    border-radius: 10px;
  }
</style>
<body>
    <canvas id="myCanvas" resize="true"></canvas>
    <div id="btnContainer">
    </div> 
</body>
<script type="text/javascript">
  var DATA;
  var STORES;
  var START;

  var lastTimestamp = 0;
  var gridHeight = 0;
  var gridWidth = 0;

  var lastPath;

  
  var prefs = new gadgets.Prefs();

  var width = prefs.getString("rdW");
  var height = prefs.getString("rdH");

  paper.install(window);
	window.onload = function() {
		paper.setup('myCanvas');
	};


  // This function is called after the gadget has been initialized.
  function onLoad() {
    readInData();
    readInStores();
  }

  function populateButtons(items){
    items.forEach(function(element) {
            var btn = $("<button class='store-btn'><strong>" + element.name + "</strong></button>");
            btn.click(function() {
              generatePath(element.name); 
            });
            $("#btnContainer").append(btn);
            
    }, this);
  }

  function generatePath(storeName) {
    if (lastPath) {
      lastPath.remove();
    }
    var counter = 0;
  
    var toX;
    var toY;

    STORES.forEach(function(element) {
      if (element.name === storeName) {
        toX = element.x;
        toY = element.y;
      }
    }, this);

    var data = getPath(toX, toY);
    if (!data[0]) {
      return;
    }

    var cellSize = prefs.getString("cellSize");

   
    var scaleX = width / (gridWidth);
    var scaleY = height / (gridHeight);

    var path = new Path();
    path.strokeColor = 'red';
    path.strokeWidth = 5; 
    path.dashArray = [10,5];
    data.forEach(function(element) {
        path.add(new Point(element[0] * scaleX, element[1] * scaleY));
    }, this);

    path.onFrame = function(event) {
        path.strokeColor.hue += 1;
    }

    path.smooth();

    lastPath = path;
  }

  function getPath(toX, toY) {
    var matrix = DATA.nodes.map(function (nested) {
      return nested.map(function (element) {
          return element.walkable ? 0 : 1;
      });
    });
    var grid = new PF.Grid(matrix);
    var finder = new PF.AStarFinder();
    var path = finder.findPath(START.x, START.y, toX, toY, grid);
    return path;
  }

  function readInData() {
    var addr = prefs.getString("dataUrl");
    var xhr = new XMLHttpRequest();
    xhr.open("GET", addr, true);
    xhr.onload = function (e) {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          var obj = JSON.parse(xhr.responseText);
          if (obj) {
            DATA = obj;
            
            gridHeight = DATA.height;
            gridWidth = DATA.width;
          }
        } else {
          console.error(xhr.statusText);
        }
      }
    };
    xhr.onerror = function (e) {
      console.error(xhr.statusText);
    };
    xhr.send(null);
  }

  function readInStores() {
    var addr = prefs.getString("storesUrl");
    var xhr = new XMLHttpRequest();
    xhr.open("GET", addr, true);
    xhr.onload = function (e) {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {
          var obj = JSON.parse(xhr.responseText);
          if (obj) {
            STORES = obj;
                 
            var index = STORES.map(x => x.name).indexOf('start');
            START = STORES[index];
        
            STORES.splice(index, 1);
      
            populateButtons(STORES);
          }
        } else {
          console.error(xhr.statusText);
        }
      }
    };
    xhr.onerror = function (e) {
      console.error(xhr.statusText);
    };
    xhr.send(null);
  }

  gadgets.util.registerOnLoadHandler(onLoad);
  
</script>

]]>
</Content>
</Module>
