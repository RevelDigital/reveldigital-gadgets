<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="Photobooth Collage" description="Display a Collage of Images" author="" background="transparent">
        <Require feature="reveldigital" />
        <UserPref name="myQuanPref" display_name="Number of Images" datatype="string" default_value="10" required="true" />
        <UserPref name="mySpeedPref" display_name="Animation Speed (ms)" datatype="string" default_value="3500" required="true" />
        <UserPref name="myImageTimingPref" display_name="Randomize Images Every (ms)" datatype="string" default_value="20000" required="true" />
        <UserPref name="myBorderSizePref" display_name="Image Border Thickness (px)" datatype="string" default_value="6" required="true" />
        <UserPref name="myImageSizePref" display_name="Image Size (px)" datatype="string" default_value="500" required="true" />
        <UserPref name="myBoolLayerPref" display_name="Randomize Layers with Animation" datatype="bool" default_value="false" />
        <UserPref name="myBoolRanPref" display_name="Randomize Images" datatype="bool" default_value="false" />
        <UserPref name="myBackColorPref" display_name="Background Color" datatype="color" default_value="#FFFFFF" />
        <UserPref name="myBorderColorPref" display_name="Border Color" datatype="color" default_value="#fff" />
        <UserPref name="ForeColor" datatype="hidden" />
        <UserPref name="BackColor" datatype="hidden" />
        <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
        <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />
        <UserPref name="regkey" display_name="Device Registration Key" default_value="*|DEVICE.REGISTRATIONKEY|*" datatype="hidden" />
    </ModulePrefs>
    <Content type="html"><![CDATA[<style type="text/css">

    body *{
        line-height: 1.2em; 
        letter-spacing: 0; 
        word-spacing: normal;
    }
    body{
        background-color: __UP_myBackColorPref__;
    }
    #containter{
      position: absolute;
      top:0;
      bottom: 0;
      left: 0;
      right: 0;
      margin: auto;
    }
    .wrapper{
      position: relative;
    }
    .box{
      position: relative;
      width: __UP_myImageSizePref__px;
      height: __UP_myImageSizePref__px;
    }
    .box img{
      position: absolute;
      width: 100%;
      height: 100%;
      object-fit: cover;
      border: __UP_myBorderSizePref__px solid __UP_myBorderColorPref__;
      border-radius: 5px;
      pointer-events: none;
    }

</style>

<script src="https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/2.0.2/anime.js"></script>

<body>
    <main>
        <div class="wrapper">
          <div class="box" id="container" style="margin:0 auto;">
          </div>
        </div>
    </main>
</body>

<script type="text/javascript">

    var prefs = new gadgets.Prefs();
    let imageValue = "__UP_myQuanPref__";
    let animeSpeed = __UP_mySpeedPref__;
    let imageTiming = __UP_myImageTimingPref__;

    var arr = [];
    const container = document.getElementById('container');
    var imgSel = document.querySelector('#container');

    const fetchData = async () => {
        const response = await axios.get('https://photo-booth.herokuapp.com/random?size=' + imageValue);
        arr = response.data;
        for (var i = arr.length; i--;) {
            arr[i] = 'https://photo-booth.herokuapp.com/p/' + arr[i];
        }
        for (let i = 0; i < arr.length; i++) {
            const img = document.createElement('img');
            if (arr[i].split("/").pop().length === 21) {
                img.src = arr[i];
                container.appendChild(img);
            }
            else {
                console.log(arr[i].split("/").pop().toString() + " is not a valid photo ID");
            }
        }
    };
    fetchData();

    const fetchUpdate = async () => {
        arr = [];
        const response = await axios.get('https://photo-booth.herokuapp.com/random?size=' + imageValue);
        arr = response.data;
        for (var i = arr.length; i--;) {
            arr[i] = 'https://photo-booth.herokuapp.com/p/' + arr[i];
        }
        var imgs = document.getElementsByTagName("img");
        for (var i = 0; i < imgs.length; i++) {
            if (arr[i].split("/").pop().length === 21) {
                imgs[i].src = arr[i];
            }
            else {
                console.log(arr[i].split("/").pop().toString() + " is not a valid photo ID");
            }
        }
    };

    if (__UP_myBoolRanPref__) {
        const intervalFetch = setInterval(function() {
            fetchUpdate();
        }, imageTiming);
    }

    let box = document.querySelector(".box");
    const intervalAnime = setInterval(function() {
        anime({
            targets: box.querySelectorAll("img"),
            easing: "easeOutExpo",
            duration: animeSpeed,
            translateX: function() {
                return anime.random(-350, 350);
            },
            translateY: function() {
                return anime.random(-50, 1350);
            },
            rotate: function() {
                return anime.random(-15, 15);
            }
        });
        if (__UP_myBoolLayerPref__) {
            for (var i = imgSel.children.length; i >= 0; i--) {
                imgSel.appendChild(imgSel.children[Math.random() * i | 0]);
            }
        }
    }, animeSpeed);
</script>]]></Content>
</Module>
