<?xml version="1.0" encoding="UTF-8" ?>

<Module>

    <ModulePrefs title="Revel Video Chat" description="Video Chat Gadget" author="RevelDigital" background="transparent">

        <UserPref name="cName" display_name="Client Name" default_value="" />      
        <UserPref name="rdW" display_name="Width" required="true" default_value="280" datatype="hidden" />
        <UserPref name="rdH" display_name="Height" required="true" default_value="190" datatype="hidden" />        
    </ModulePrefs>
<Content type="html">

<![CDATA[

<html>
<head>
    <title>WebRTC Audio/Video-Chat</title>
    <style>
        #remoteVideo{
            background: red;
            width: __UP_rdW__px;
            height: __UP_rdH__px;
        }
        #localVideo{
            position: absolute;
            left: 0px;
            top: 0px;
            width: 30%
            height: 30%;
            max-width: 30%;
            max-width: 30%;
            background: blue;
        }
    </style>
</head>

<body>
<video id="remoteVideo" autoplay></video>
<video id="localVideo" autoplay muted></video>

<script type="text/javascript">
    /** browser dependent definition are aligned to one and the same standard name **/
    navigator.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia;
    window.RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
    window.RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate || window.webkitRTCIceCandidate;
    window.RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription;
    window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition
        || window.msSpeechRecognition || window.oSpeechRecognition;

    var config = {
        wssHost: 'wss://vidchat.reveldigital.com'//wss://glacial-sierra-57472.herokuapp.com/6432'
        // wssHost: 'wss://example.com/myWebSocket'
    };
    var localVideoElem = null,
        remoteVideoElem = null,
        localVideoStream = null;


    var peerConn = null,
        wsc = new WebSocket(config.wssHost),
        peerConnCfg = {'iceServers':
            [{'url': 'stun:stun.services.mozilla.com'},
                {'url': 'stun:stun.l.google.com:19302'}]
        };

    function pageReady() {
        // check browser WebRTC availability
        if(navigator.getUserMedia) {
            localVideo = document.getElementById('localVideo');
            remoteVideo = document.getElementById('remoteVideo');
        } else {
            alert("Sorry, your browser does not support WebRTC! <br/> Browser Version: " + jQuery.browser.version)
        }
    };

    function prepareCall() {
        peerConn = new RTCPeerConnection(peerConnCfg);
        // send any ice candidates to the other peer
        peerConn.onicecandidate = onIceCandidateHandler;
        // once remote stream arrives, show it in the remote video element
        peerConn.onaddstream = onAddStreamHandler;
    };

    // run start(true) to initiate a call
    function initiateCall() {
        prepareCall();
        // get the local stream, show it in the local video element and send it
        navigator.getUserMedia({ "audio": true, "video": true }, function (stream) {
            localVideoStream = stream;
            localVideo.src = URL.createObjectURL(localVideoStream);
            peerConn.addStream(localVideoStream);
            createAndSendOffer();
        }, function(error) { console.log(error);});
    };

    function answerCall() {
        prepareCall();
        // get the local stream, show it in the local video element and send it
        navigator.getUserMedia({ "audio": true, "video": true }, function (stream) {
            localVideoStream = stream;
            localVideo.src = URL.createObjectURL(localVideoStream);
            peerConn.addStream(localVideoStream);
            createAndSendAnswer();
        }, function(error) { console.log(error);});
    };

    wsc.onmessage = function (evt) {
        var signal = null;
        if (!peerConn) answerCall();
        signal = JSON.parse(evt.data);
        if (signal.sdp) {
            console.log("Received SDP from remote peer.");
            peerConn.setRemoteDescription(new RTCSessionDescription(signal.sdp));
        }
        else if (signal.candidate) {
            console.log("Received ICECandidate from remote peer.");
            peerConn.addIceCandidate(new RTCIceCandidate(signal.candidate));
        } else if ( signal.closeConnection){
            console.log("Received 'close call' signal from remote peer.");
            endCall();
        }
    };

    function createAndSendOffer() {
        peerConn.createOffer(
            function (offer) {
                var off = new RTCSessionDescription(offer);
                peerConn.setLocalDescription(new RTCSessionDescription(off),
                    function() {
                        wsc.send(JSON.stringify({"sdp": off }));
                    },
                    function(error) { console.log(error);}
                );
            },
            function (error) { console.log(error);}
        );
    };

    function createAndSendAnswer() {
        peerConn.createAnswer(
            function (answer) {
                var ans = new RTCSessionDescription(answer);
                peerConn.setLocalDescription(ans, function() {
                        wsc.send(JSON.stringify({"sdp": ans }));
                    },
                    function (error) { console.log(error);}
                );
            },
            function (error) {console.log(error);}
        );
    };

    function onIceCandidateHandler(evt) {
        if (!evt || !evt.candidate) return;
        wsc.send(JSON.stringify({"candidate": evt.candidate }));
    };

    function onAddStreamHandler(evt) {
        // set remote video stream as source for remote video HTML5 element
        remoteVideo.src = URL.createObjectURL(evt.stream);
    };

    function endCall() {
        wsc.send(JSON.stringify({"closeConnection": true }));
        peerConn.close();
        peerConn = null;
        if (localVideoStream) {
            localVideoStream.getTracks().forEach(function (track) {
                track.stop();
            });
            localVideo.src = "";
        }
        if (remoteVideo) remoteVideo.src = "";
    };
</script>

<script type="text/javascript">
    window.addEventListener("load", pageReady);
</script>
</body>
</html>
        
        ]]>
    </Content>

</Module>
